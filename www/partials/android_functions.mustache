<script>
// polyfills
Array.prototype.includes||Object.defineProperty(Array.prototype,"includes",{value:function(f,g){if(null==this)throw new TypeError('"this" is null or not defined');var e=Object(this),b=e.length>>>0;if(0===b)return!1;var a=g|0;for(a=Math.max(0<=a?a:b-Math.abs(a),0);a<b;){var c=e[a],d=f;if(c===d||"number"===typeof c&&"number"===typeof d&&isNaN(c)&&isNaN(d))return!0;a++}return!1}});
String.prototype.trim||(String.prototype.trim=function(){return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")});

(function (w, d, undefined) {

  // check network status
  function checkNetwork(e) {
    if ("onLine" in navigator) {
      if (navigator.onLine) {
        d.getElementsByTagName("html")[0].setAttribute("offline", false);
        if (d.getElementById("offline-message")) d.getElementById("offline-message").setAttribute("aria-hidden", true);
        if (GSC) GSC.offline = false;
      } else {
        d.getElementsByTagName("html")[0].setAttribute("offline", true);
        if (d.getElementById("offline-message")) d.getElementById("offline-message").setAttribute("aria-hidden", false);
        if (GSC) GSC.offline = true;
        if (GSC) GSC.loaderOff();
      }
    }
  }

  // "online" feature detection
  if ("onLine" in navigator) {
    w.addEventListener("load", function () {
      w.addEventListener("online", checkNetwork);
      w.addEventListener("offline", checkNetwork);
      checkNetwork();
    });
  }

  // window.setCookie()
  if (typeof window.setCookie !== "function") window.setCookie = function (key, value, days) {
    if (key === undefined) return false;
    if (value === undefined) return false;
    if (days === undefined) days = 31;
    if (days === 0) {
      // session cookie
      document.cookie = key + "=" + value + ";path=/";
    } else {
      var date = new Date();
      date.setTime(date.getTime() + (parseInt(days) * 86400));
      document.cookie = key + "=" + value + ";path=/" + ";expires=" + date.toGMTString();
    }
  }

  // window.getCookie()
  if (typeof window.getCookie !== "function") window.getCookie = function (key) {
    if (key === undefined) return false;
    var v = document.cookie.match('(^|;) ?' + key + '=([^;]*)(;|$)');
    return v ? v[2] : null;
  }

  // window.delCookie()
  if (typeof window.delCookie !== "function") window.delCookie = function (key) {
    if (key === undefined) return false;
    var date = new Date();
    date.setTime(0);
    document.cookie = key + "=;path=/" + ";expires=" + date.toGMTString();
  }

  if (GSC) {
    GSC.data = {};
    GSC.isadmin = {{#admin_group_admin}}true{{/admin_group_admin}}{{^admin_group_admin}}false{{/admin_group_admin}};
    GSC.profile = null;
    GSC.data.multisite_profiles = {{ multisite_profiles_json }};

    // feature detection: "touch"
    GSC.touch = ("ontouchstart" in w || w.DocumentTouch && d instanceof DocumentTouch) ?
      true : false;
    if (GSC.touch) d.getElementsByTagName("html")[0].setAttribute("touch", true);

    // GSC.CopyClipboard()
    if (typeof GSC.CopyClipboard !== "function") GSC.CopyClipboard = function (data) {
      var el = d.createElement("textarea");
      el.value = data;
      el.setAttribute("readonly", "");
      el.style.position = "absolute";
      el.style.left = "-9999px";
      d.body.appendChild(el);
      var selected =
        d.getSelection().rangeCount > 0 ? d.getSelection().getRangeAt(0) : false;
      el.select();
      d.execCommand("copy");
      d.body.removeChild(el);
      if (selected) {
        d.getSelection().removeAllRanges();
        d.getSelection().addRange(selected);
      }
    }

    // GSC.CopyThisText()
    if (typeof GSC.CopyThisText !== "function") GSC.CopyThisText = function (that) {
      if (that) {
        var t = $(that).text().trim();
        GSC.CopyClipboard(t);
        M.toast({html: t});
      }
    }

    // GSC.CopyThisHtml()
    if (typeof GSC.CopyThisHtml !== "function") GSC.CopyThisHtml = function (that) {
      if (that) {
        var t = $(that).text().trim();
        var h = $(that).html().trim();
        GSC.CopyClipboard(h);
        M.toast({html: t});
      }
    }

    // DELAYED UI bindings
    GSC.init.push(function () {
      GSC.names.push("UI bindings");
    });

  }
})(window, document);
</script>
