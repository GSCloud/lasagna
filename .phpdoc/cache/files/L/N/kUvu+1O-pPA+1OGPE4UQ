1658673618
AwuilbDvXz%3Add3f71d46543a1c62695537bb4104c7b-0f60a09025419ef1b7a5419b0146a6f3
s:195444:"O:33:"phpDocumentor\Reflection\Php\File":12:{s:43:" phpDocumentor\Reflection\Php\File docBlock";N;s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"0f60a09025419ef1b7a5419b0146a6f3";s:39:" phpDocumentor\Reflection\Php\File name";s:56:"__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7.php";s:39:" phpDocumentor\Reflection\Php\File path";s:61:"temp/__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7.php";s:41:" phpDocumentor\Reflection\Php\File source";s:103491:"<?php

class __localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7 extends Mustache_Template
{
    private $lambdaHelper;

    public function renderInternal(Mustache_Context $context, $indent = '')
    {
        $this->lambdaHelper = new Mustache_LambdaHelper($this->mustache, $context);
        $buffer = '';

        // 'admin_group_admin' section
        $value = $context->find('admin_group_admin');
        $buffer .= $this->section9c26da3c71553c80cd5af6f50f07cdbd($context, $indent, $value);
        $buffer .= $indent . '
';
        // 'admin_group_editor' section
        $value = $context->find('admin_group_editor');
        $buffer .= $this->section58b946eb292fa18b858a52771206644f($context, $indent, $value);
        $buffer .= $indent . '
';
        // 'admin_group_tester' section
        $value = $context->find('admin_group_tester');
        $buffer .= $this->sectionF67ca9f1380367445e3d9f8034a44e39($context, $indent, $value);

        return $buffer;
    }

    private function section2018af295c837e3d60f856e821ba1913(Mustache_Context $context, $indent, $value)
    {
        $buffer = '';
    
        if (!is_string($value) && is_callable($value)) {
            $source = '{{ google.analytics }}';
            $result = call_user_func($value, $source, $this->lambdaHelper);
            if (strpos($result, '{{') === false) {
                $buffer .= $result;
            } else {
                $buffer .= $this->mustache
                    ->loadLambda((string) $result)
                    ->renderInternal($context);
            }
        } elseif (!empty($value)) {
            $values = $this->isIterable($value) ? $value : array($value);
            foreach ($values as $value) {
                $context->push($value);
                
                $value = $this->resolveValue($context->findDot('google.analytics'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $context->pop();
            }
        }
    
        return $buffer;
    }

    private function sectionF2af4124a55301e96d00ff00eb122a2d(Mustache_Context $context, $indent, $value)
    {
        $buffer = '';
    
        if (!is_string($value) && is_callable($value)) {
            $source = '
      <a rel="noreferrer noopener" target="_blank" class="tooltipped green white-text" style="padding:4px"
        data-position="top" data-tooltip="{{ title }}" href="{{ link }}"><b>&nbsp;{{ name }}&nbsp;</b></a>&nbsp;&nbsp;
    ';
            $result = call_user_func($value, $source, $this->lambdaHelper);
            if (strpos($result, '{{') === false) {
                $buffer .= $result;
            } else {
                $buffer .= $this->mustache
                    ->loadLambda((string) $result)
                    ->renderInternal($context);
            }
        } elseif (!empty($value)) {
            $values = $this->isIterable($value) ? $value : array($value);
            foreach ($values as $value) {
                $context->push($value);
                
                $buffer .= $indent . '      <a rel="noreferrer noopener" target="_blank" class="tooltipped green white-text" style="padding:4px"
';
                $buffer .= $indent . '        data-position="top" data-tooltip="';
                $value = $this->resolveValue($context->find('title'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '" href="';
                $value = $this->resolveValue($context->find('link'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '"><b>&nbsp;';
                $value = $this->resolveValue($context->find('name'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '&nbsp;</b></a>&nbsp;&nbsp;
';
                $context->pop();
            }
        }
    
        return $buffer;
    }

    private function sectionD9c02709c437112903eaef9f7995d97e(Mustache_Context $context, $indent, $value)
    {
        $buffer = '';
    
        if (!is_string($value) && is_callable($value)) {
            $source = '
            <option value="{{.}}">{{.}}</option>
            ';
            $result = call_user_func($value, $source, $this->lambdaHelper);
            if (strpos($result, '{{') === false) {
                $buffer .= $result;
            } else {
                $buffer .= $this->mustache
                    ->loadLambda((string) $result)
                    ->renderInternal($context);
            }
        } elseif (!empty($value)) {
            $values = $this->isIterable($value) ? $value : array($value);
            foreach ($values as $value) {
                $context->push($value);
                
                $buffer .= $indent . '            <option value="';
                $value = $this->resolveValue($context->last(), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '">';
                $value = $this->resolveValue($context->last(), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '</option>
';
                $context->pop();
            }
        }
    
        return $buffer;
    }

    private function sectionA766412041036b24df5bc20ddd21d9a7(Mustache_Context $context, $indent, $value)
    {
        $buffer = '';
    
        if (!is_string($value) && is_callable($value)) {
            $source = '
          <span title="📋 {{ l.a_copy_tit }}" onclick="javascript:GSC.CopyThisText(this)" class="hover"
            data-copy="{{ BASE }}{{ lang }}/exportHTML/{{ GET.profile }}{{ request_path_slug }}">📋</span>
          &nbsp;
          <a target=_blank
            href="{{ BASE }}{{ lang }}/exportHTML/{{ GET.profile }}{{ request_path_slug }}">🌍 exportHTML</a>
          &nbsp;
          <span title="📋 Remote Content for WordPress" onclick="javascript:GSC.CopyThisText(this)" class="hover"
            data-copy=\'[remote_content url="{{ BASE }}{{ lang }}/exportHTML/{{ GET.profile }}{{ request_path_slug }}"]\'>📋&nbsp;RCWP</span>&nbsp;&nbsp;
          ';
            $result = call_user_func($value, $source, $this->lambdaHelper);
            if (strpos($result, '{{') === false) {
                $buffer .= $result;
            } else {
                $buffer .= $this->mustache
                    ->loadLambda((string) $result)
                    ->renderInternal($context);
            }
        } elseif (!empty($value)) {
            $values = $this->isIterable($value) ? $value : array($value);
            foreach ($values as $value) {
                $context->push($value);
                
                $buffer .= $indent . '          <span title="📋 ';
                $value = $this->resolveValue($context->findDot('l.a_copy_tit'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '" onclick="javascript:GSC.CopyThisText(this)" class="hover"
';
                $buffer .= $indent . '            data-copy="';
                $value = $this->resolveValue($context->find('BASE'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $value = $this->resolveValue($context->find('lang'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '/exportHTML/';
                $value = $this->resolveValue($context->findDot('GET.profile'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $value = $this->resolveValue($context->find('request_path_slug'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '">📋</span>
';
                $buffer .= $indent . '          &nbsp;
';
                $buffer .= $indent . '          <a target=_blank
';
                $buffer .= $indent . '            href="';
                $value = $this->resolveValue($context->find('BASE'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $value = $this->resolveValue($context->find('lang'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '/exportHTML/';
                $value = $this->resolveValue($context->findDot('GET.profile'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $value = $this->resolveValue($context->find('request_path_slug'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '">🌍 exportHTML</a>
';
                $buffer .= $indent . '          &nbsp;
';
                $buffer .= $indent . '          <span title="📋 Remote Content for WordPress" onclick="javascript:GSC.CopyThisText(this)" class="hover"
';
                $buffer .= $indent . '            data-copy=\'[remote_content url="';
                $value = $this->resolveValue($context->find('BASE'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $value = $this->resolveValue($context->find('lang'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '/exportHTML/';
                $value = $this->resolveValue($context->findDot('GET.profile'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $value = $this->resolveValue($context->find('request_path_slug'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '"]\'>📋&nbsp;RCWP</span>&nbsp;&nbsp;
';
                $context->pop();
            }
        }
    
        return $buffer;
    }

    private function sectionB32a178bff5c814b2b24768afa655fc8(Mustache_Context $context, $indent, $value)
    {
        $buffer = '';
    
        if (!is_string($value) && is_callable($value)) {
            $source = '
          {{#GET.profile}}
          <span title="📋 {{ l.a_copy_tit }}" onclick="javascript:GSC.CopyThisText(this)" class="hover"
            data-copy="{{ BASE }}{{ lang }}/exportHTML/{{ GET.profile }}{{ request_path_slug }}">📋</span>
          &nbsp;
          <a target=_blank
            href="{{ BASE }}{{ lang }}/exportHTML/{{ GET.profile }}{{ request_path_slug }}">🌍 exportHTML</a>
          &nbsp;
          <span title="📋 Remote Content for WordPress" onclick="javascript:GSC.CopyThisText(this)" class="hover"
            data-copy=\'[remote_content url="{{ BASE }}{{ lang }}/exportHTML/{{ GET.profile }}{{ request_path_slug }}"]\'>📋&nbsp;RCWP</span>&nbsp;&nbsp;
          {{/GET.profile}}

          {{^GET.profile}}
          <span title="📋 {{ l.a_copy_tit }}" onclick="javascript:GSC.CopyThisText(this)" class="hover"
            data-copy="{{ BASE }}{{ lang }}/exportHTML/default{{ request_path_slug }}">📋</span>
          &nbsp;
          <a target=_blank
            href="{{ BASE }}{{ lang }}/exportHTML/default{{ request_path_slug }}">🌍 exportHTML</a>
          &nbsp;
          <span title="📋 Remote Content for WordPress" onclick="javascript:GSC.CopyThisText(this)" class="hover"
            data-copy=\'[remote_content url="{{ BASE }}{{ lang }}/exportHTML/default{{ request_path_slug }}"]\'>📋&nbsp;RCWP</span>&nbsp;&nbsp;
          {{/GET.profile}}
          ';
            $result = call_user_func($value, $source, $this->lambdaHelper);
            if (strpos($result, '{{') === false) {
                $buffer .= $result;
            } else {
                $buffer .= $this->mustache
                    ->loadLambda((string) $result)
                    ->renderInternal($context);
            }
        } elseif (!empty($value)) {
            $values = $this->isIterable($value) ? $value : array($value);
            foreach ($values as $value) {
                $context->push($value);
                
                // 'GET.profile' section
                $value = $context->findDot('GET.profile');
                $buffer .= $this->sectionA766412041036b24df5bc20ddd21d9a7($context, $indent, $value);
                $buffer .= $indent . '
';
                // 'GET.profile' inverted section
                $value = $context->findDot('GET.profile');
                if (empty($value)) {
                    
                    $buffer .= $indent . '          <span title="📋 ';
                    $value = $this->resolveValue($context->findDot('l.a_copy_tit'), $context);
                    $buffer .= call_user_func($this->mustache->getEscape(), $value);
                    $buffer .= '" onclick="javascript:GSC.CopyThisText(this)" class="hover"
';
                    $buffer .= $indent . '            data-copy="';
                    $value = $this->resolveValue($context->find('BASE'), $context);
                    $buffer .= call_user_func($this->mustache->getEscape(), $value);
                    $value = $this->resolveValue($context->find('lang'), $context);
                    $buffer .= call_user_func($this->mustache->getEscape(), $value);
                    $buffer .= '/exportHTML/default';
                    $value = $this->resolveValue($context->find('request_path_slug'), $context);
                    $buffer .= call_user_func($this->mustache->getEscape(), $value);
                    $buffer .= '">📋</span>
';
                    $buffer .= $indent . '          &nbsp;
';
                    $buffer .= $indent . '          <a target=_blank
';
                    $buffer .= $indent . '            href="';
                    $value = $this->resolveValue($context->find('BASE'), $context);
                    $buffer .= call_user_func($this->mustache->getEscape(), $value);
                    $value = $this->resolveValue($context->find('lang'), $context);
                    $buffer .= call_user_func($this->mustache->getEscape(), $value);
                    $buffer .= '/exportHTML/default';
                    $value = $this->resolveValue($context->find('request_path_slug'), $context);
                    $buffer .= call_user_func($this->mustache->getEscape(), $value);
                    $buffer .= '">🌍 exportHTML</a>
';
                    $buffer .= $indent . '          &nbsp;
';
                    $buffer .= $indent . '          <span title="📋 Remote Content for WordPress" onclick="javascript:GSC.CopyThisText(this)" class="hover"
';
                    $buffer .= $indent . '            data-copy=\'[remote_content url="';
                    $value = $this->resolveValue($context->find('BASE'), $context);
                    $buffer .= call_user_func($this->mustache->getEscape(), $value);
                    $value = $this->resolveValue($context->find('lang'), $context);
                    $buffer .= call_user_func($this->mustache->getEscape(), $value);
                    $buffer .= '/exportHTML/default';
                    $value = $this->resolveValue($context->find('request_path_slug'), $context);
                    $buffer .= call_user_func($this->mustache->getEscape(), $value);
                    $buffer .= '"]\'>📋&nbsp;RCWP</span>&nbsp;&nbsp;
';
                }
                $context->pop();
            }
        }
    
        return $buffer;
    }

    private function section4fc63fdf387f636e11d74c11b05cd5bc(Mustache_Context $context, $indent, $value)
    {
        $buffer = '';
    
        if (!is_string($value) && is_callable($value)) {
            $source = '
          <span title="📋 {{ l.a_copy_tit }}" onclick="javascript:GSC.CopyThisText(this)" class="hover"
            data-copy="{{ BASE }}{{ lang }}/exportHTML/{{ GET.profile }}/!">📋</span>
          &nbsp;
          <a target=_blank
            href="{{ BASE }}{{ lang }}/exportHTML/{{ GET.profile }}/!">🌍 exportHTML</a>
          &nbsp;
          <span title="📋 Remote Content for WordPress" onclick="javascript:GSC.CopyThisText(this)" class="hover"
            data-copy=\'[remote_content url="{{ BASE }}{{ lang }}/exportHTML/{{ GET.profile }}/!"]\'>📋&nbsp;RCWP</span>&nbsp;&nbsp;
          ';
            $result = call_user_func($value, $source, $this->lambdaHelper);
            if (strpos($result, '{{') === false) {
                $buffer .= $result;
            } else {
                $buffer .= $this->mustache
                    ->loadLambda((string) $result)
                    ->renderInternal($context);
            }
        } elseif (!empty($value)) {
            $values = $this->isIterable($value) ? $value : array($value);
            foreach ($values as $value) {
                $context->push($value);
                
                $buffer .= $indent . '          <span title="📋 ';
                $value = $this->resolveValue($context->findDot('l.a_copy_tit'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '" onclick="javascript:GSC.CopyThisText(this)" class="hover"
';
                $buffer .= $indent . '            data-copy="';
                $value = $this->resolveValue($context->find('BASE'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $value = $this->resolveValue($context->find('lang'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '/exportHTML/';
                $value = $this->resolveValue($context->findDot('GET.profile'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '/!">📋</span>
';
                $buffer .= $indent . '          &nbsp;
';
                $buffer .= $indent . '          <a target=_blank
';
                $buffer .= $indent . '            href="';
                $value = $this->resolveValue($context->find('BASE'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $value = $this->resolveValue($context->find('lang'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '/exportHTML/';
                $value = $this->resolveValue($context->findDot('GET.profile'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '/!">🌍 exportHTML</a>
';
                $buffer .= $indent . '          &nbsp;
';
                $buffer .= $indent . '          <span title="📋 Remote Content for WordPress" onclick="javascript:GSC.CopyThisText(this)" class="hover"
';
                $buffer .= $indent . '            data-copy=\'[remote_content url="';
                $value = $this->resolveValue($context->find('BASE'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $value = $this->resolveValue($context->find('lang'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '/exportHTML/';
                $value = $this->resolveValue($context->findDot('GET.profile'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '/!"]\'>📋&nbsp;RCWP</span>&nbsp;&nbsp;
';
                $context->pop();
            }
        }
    
        return $buffer;
    }

    private function sectionC5b46eec0542b5dcbedde6e466016efc(Mustache_Context $context, $indent, $value)
    {
        $buffer = '';
    
        if (!is_string($value) && is_callable($value)) {
            $source = '
                <span title="{{ google.mapsapi_key }}" class="protect">{{ google.mapsapi_key }}</span>
                ';
            $result = call_user_func($value, $source, $this->lambdaHelper);
            if (strpos($result, '{{') === false) {
                $buffer .= $result;
            } else {
                $buffer .= $this->mustache
                    ->loadLambda((string) $result)
                    ->renderInternal($context);
            }
        } elseif (!empty($value)) {
            $values = $this->isIterable($value) ? $value : array($value);
            foreach ($values as $value) {
                $context->push($value);
                
                $buffer .= $indent . '                <span title="';
                $value = $this->resolveValue($context->findDot('google.mapsapi_key'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '" class="protect">';
                $value = $this->resolveValue($context->findDot('google.mapsapi_key'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '</span>
';
                $context->pop();
            }
        }
    
        return $buffer;
    }

    private function sectionE7e3bbf6ea802e675a80045c418a5a20(Mustache_Context $context, $indent, $value)
    {
        $buffer = '';
    
        if (!is_string($value) && is_callable($value)) {
            $source = '
                <span title="{{ google.pagespeedinsights_key }}" class="protect">{{ google.pagespeedinsights_key }}</span>
                ';
            $result = call_user_func($value, $source, $this->lambdaHelper);
            if (strpos($result, '{{') === false) {
                $buffer .= $result;
            } else {
                $buffer .= $this->mustache
                    ->loadLambda((string) $result)
                    ->renderInternal($context);
            }
        } elseif (!empty($value)) {
            $values = $this->isIterable($value) ? $value : array($value);
            foreach ($values as $value) {
                $context->push($value);
                
                $buffer .= $indent . '                <span title="';
                $value = $this->resolveValue($context->findDot('google.pagespeedinsights_key'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '" class="protect">';
                $value = $this->resolveValue($context->findDot('google.pagespeedinsights_key'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '</span>
';
                $context->pop();
            }
        }
    
        return $buffer;
    }

    private function section8eee11804dcd2f5beefb9520545f9321(Mustache_Context $context, $indent, $value)
    {
        $buffer = '';
    
        if (!is_string($value) && is_callable($value)) {
            $source = '
        <a title="{{ l.a_google_backup_ttip }}" rel="noreferrer noopener" target="_blank" class="tooltipped brown-text text" data-position="top"
          data-tooltip="{{ l.a_google_backup_ttip }}" href="{{ google_drive_backup }}">
          <i class="fas fa-warehouse"></i></a>
        ';
            $result = call_user_func($value, $source, $this->lambdaHelper);
            if (strpos($result, '{{') === false) {
                $buffer .= $result;
            } else {
                $buffer .= $this->mustache
                    ->loadLambda((string) $result)
                    ->renderInternal($context);
            }
        } elseif (!empty($value)) {
            $values = $this->isIterable($value) ? $value : array($value);
            foreach ($values as $value) {
                $context->push($value);
                
                $buffer .= $indent . '        <a title="';
                $value = $this->resolveValue($context->findDot('l.a_google_backup_ttip'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '" rel="noreferrer noopener" target="_blank" class="tooltipped brown-text text" data-position="top"
';
                $buffer .= $indent . '          data-tooltip="';
                $value = $this->resolveValue($context->findDot('l.a_google_backup_ttip'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '" href="';
                $value = $this->resolveValue($context->find('google_drive_backup'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '">
';
                $buffer .= $indent . '          <i class="fas fa-warehouse"></i></a>
';
                $context->pop();
            }
        }
    
        return $buffer;
    }

    private function section90a107d07b7ceda223cc86a30431895b(Mustache_Context $context, $indent, $value)
    {
        $buffer = '';
    
        if (!is_string($value) && is_callable($value)) {
            $source = '{{ . }} ';
            $result = call_user_func($value, $source, $this->lambdaHelper);
            if (strpos($result, '{{') === false) {
                $buffer .= $result;
            } else {
                $buffer .= $this->mustache
                    ->loadLambda((string) $result)
                    ->renderInternal($context);
            }
        } elseif (!empty($value)) {
            $values = $this->isIterable($value) ? $value : array($value);
            foreach ($values as $value) {
                $context->push($value);
                
                $value = $this->resolveValue($context->last(), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= ' ';
                $context->pop();
            }
        }
    
        return $buffer;
    }

    private function section55e47f068fec12184963a64973b36dbd(Mustache_Context $context, $indent, $value)
    {
        $buffer = '';
    
        if (!is_string($value) && is_callable($value)) {
            $source = '<script src="{{ cdn }}/summernote/lang/summernote-cs-CZ.min.js" defer></script>';
            $result = call_user_func($value, $source, $this->lambdaHelper);
            if (strpos($result, '{{') === false) {
                $buffer .= $result;
            } else {
                $buffer .= $this->mustache
                    ->loadLambda((string) $result)
                    ->renderInternal($context);
            }
        } elseif (!empty($value)) {
            $values = $this->isIterable($value) ? $value : array($value);
            foreach ($values as $value) {
                $context->push($value);
                
                $buffer .= $indent . '<script src="';
                $value = $this->resolveValue($context->find('cdn'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '/summernote/lang/summernote-cs-CZ.min.js" defer></script>';
                $context->pop();
            }
        }
    
        return $buffer;
    }

    private function section9c26da3c71553c80cd5af6f50f07cdbd(Mustache_Context $context, $indent, $value)
    {
        $buffer = '';
    
        if (!is_string($value) && is_callable($value)) {
            $source = '
<style>
/* PHP LOGO */
.php1{position:relative;left:+0.1em;text-transform:lowercase!important}
.php2{position:relative;left:+0.0em;text-transform:lowercase!important}
.php3{position:relative;left:-0.1em;text-transform:lowercase!important}

/* EMOJIS */
.bigemoji{font-size:5em}
.emoji-list i {font-style: normal!important}
.emoji-list {min-width: 400px;padding:5px;overflow:scroll;display:inline-block;cursor:pointer;margin:1px}
@media (max-width:599px) { /* smaller box for mobiles */
  .emoji-list * {margin: 5px}
  .emoji-list {min-width: 300px!important}
}
@media (min-width:600px) { /* bigger box */
  .emoji-list * {margin: 2px}
  .emoji-list {min-width: 400px!important}
}
@media (max-width:1023px) { /* fixed box position to the left for mobiles and tablets */
  .emoji-list {position:relative!important;left:0!important}
}

/* ADMIN PANEL */
label{color:#000;font-weight:bold}
#admin_main{font-family:Arial!important;padding-top:5px;font-size:14px!important}
#admin_main .row{margin-bottom:5px}
#admin_main h2,#admin_main h3,#admin_main h4,#admin_main h5,#admin_main h6{font-family:Arial!important;text-transform:uppercase}
.a_reset{font-family:Arial!important;font-size:14px!important}
.a_h2{font-size:5em!important;font-weight:700!important}
.a_h3{font-size:4em!important;font-weight:700!important}
.a_h4{font-size:3em!important;font-weight:700!important}
.a_h5{font-size:2em!important;font-weight:700!important}
.btnmargin{margin:2px;margin-bottom:5px}
.dragover{border:4px dashed blue!important}
.extrapadding{padding:5px;border-radius:5px}
.hover{cursor:pointer}
.nowrap{white-space:nowrap}
.protect{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:inline-block;width:10em;line-height:12px}
.mobilebutt{font-size:1em}

/* ROTATION & TOUCH */
#a_rotate_device{display:none}
[touch="true"] #a_rotate_device{display:block}

/* SUMMERNOTE */
.summernote{border:2px dashed #ccc;padding:1rem!important}
.summernote::before{content:"📝";position:relative;top:-3rem;left:-1rem}
.panel-heading.note-toolbar .note-font .dropdown-menu,.panel-heading.note-toolbar .note-style .dropdown-menu{min-width:245px;padding:5px}
.panel-heading.note-toolbar .note-font .dropdown-menu>div:first-child,.panel-heading.note-toolbar .note-style .dropdown-menu>div:first-child{margin-right:5px}
.note-add-text-tags-btn{font-family:"Times New Roman",serif;min-width:30px}
div.checkbox.sn-checkbox-open-in-new-window>label>input[type=checkbox]{opacity:1!important;position:relative!important;margin:5px!important}
div.checkbox.sn-checkbox-use-protocol>label>input[type=checkbox]{opacity:1!important;position:relative!important;margin:5px!important}
</style>

<!-- MOTÝLE -->
<span style="position:fixed;left:0;top:0;z-index:999999" class="motyle btn white hide-on-med-and-down">🦋</span>
<span style="position:fixed;right:0;top:0;z-index:999999" class="motyle btn white hide-on-large-only">🦋</span>

<!-- ADMIN PANEL -->
<div id="admin_main" class="row center black white-text" style="display:none;margin:0!important">

  <!-- DEVICE ROTATION INFO -->
  <div id="a_rotate_device" class="row center" style="padding-top:3px">
    {{ l.a_rotate_device }}
  </div>

  <!-- CUSTOM ADMIN PANEL -->
  {{>admin_custom}}

  <!-- EXTERNAL SERVICES -->
  <div class="row center black hide-on-small-only">
    <div class="extrapadding hide-on-small-only" style="padding-top:3px">
      <a style="margin:2px;" class="tooltipped waves-effect teal waves-light btn" target="_blank" rel="noopener"
        data-position="top" data-tooltip="{{ l.a_google_account_ttip }}" href="https://myaccount.google.com/dashboard">
        <i class="fab fa-google"></i>
        {{ l.a_google_account }}</a>
      <a style="margin:2px;" class="tooltipped waves-effect teal waves-light btn" target="_blank" rel="noopener"
        data-position="top" data-tooltip="{{ l.a_google_password_ttip }}" href="https://passwords.google.com">
        <i class="fab fa-google"></i>
        {{ l.a_google_password }}</a>
      <a style="margin:2px;" class="tooltipped waves-effect teal waves-light btn" target="_blank" rel="noopener"
        data-position="top" data-tooltip="{{ l.a_google_search_ttip }}"
        href="https://search.google.com/search-console?resource_id={{ canonical_url }}">
        <i class="fab fa-google"></i>
        {{ l.a_google_search }}</a>
      <a style="margin:2px;" class="tooltipped waves-effect teal waves-light btn" target="_blank" rel="noopener"
        data-position="top" data-tooltip="{{ l.a_google_analytics_ttip }}"
        href="{{#google.analytics}}{{ google.analytics }}{{/google.analytics}}{{^google.analytics}}https://analytics.google.com/analytics/web/{{/google.analytics}}">
        <i class="fab fa-google"></i>
        {{ l.a_google_analytics }}</a>
      <a style="margin:2px;" class="tooltipped waves-effect lime waves-light btn" target="_blank" rel="noopener"
        data-position="top" data-tooltip="{{ l.a_onesignal_ttip }}" href="https://app.onesignal.com/login">
        <i class="fas fa-bell"></i>
        {{ l.a_onesignal }}</a>
    </div>
  </div>

  <!-- EXTERNAL LINKS -->
  <div class="row center black">
    {{#external_links}}
      <a rel="noreferrer noopener" target="_blank" class="tooltipped green white-text" style="padding:4px"
        data-position="top" data-tooltip="{{ title }}" href="{{ link }}"><b>&nbsp;{{ name }}&nbsp;</b></a>&nbsp;&nbsp;
    {{/external_links}}
  </div>

  <!-- ADMIN GRID -->
  <div class="row grid" style="overflow:hidden" style="padding-top:3px">

    <!-- DATA -->
    <div class="col l4 m6 s12">
      <div class="row center extrapadding">
          <h5>{{ l.a_locales }}&nbsp;<span id="csv_ping" class="mono">&nbsp;</span></h5>
        <p id="a_update_info"></p>
        <p style="font-size:10px!important">
          PHP ver. <b>{{ PHP_VERSION }}</b><br>
          Tesseract LASAGNA 2.0<br>
          App ver. <b>{{ VERSION_SHORT }}</b> / <b>{{ VERSION_DATE }}</b> / rev. <b>{{ REVISIONS }}</b><br>
        </p>
        <div class="col s12 white">
          <label>{{ l.a_profiles }}</label>
          <select id="SiteSelect">
            <option value="" disabled selected>&hellip;</option>
            {{#multisite_names}}
            <option value="{{.}}">{{.}}</option>
            {{/multisite_names}}
          </select>
        </div>

        <div id="domains" style="font-size:12px!important;color:#888!important" class="container"></div>

        <div class="col s12 white">
          <label>{{ l.a_articles }}</label>
          <select id="ArticleURLSelect"></select>
        </div>

        <a id="a_files"
          data-position="top" data-tooltip="{{ l.a_files_ttip }}"
          style="margin:5px" class="tooltipped waves-effect blue waves btn"><i class="fas fa-archive"></i></a>
        <a id="a_upload"
          data-position="top" data-tooltip="{{ l.a_upload_ttip }}"
          style="margin:5px" class="tooltipped waves-effect blue waves btn"><i class="fas fa-upload"></i></a>
        <a id="a_summernote"
          data-position="top" data-tooltip="{{ l.a_summernote_ttip }}"
          style="margin:5px" class="tooltipped waves-effect green waves-light btn">
          <i class="fas fa-edit"></i>&nbsp;{{ l.a_summernote }}</a>
        <a id="a_article"
          data-position="top" data-tooltip="{{ l.a_article_ttip }}"
          style="margin:5px" class="tooltipped waves-effect green waves-light btn">
          <i class="fas fa-plus-square"></i>&nbsp;URL</a>&nbsp;<span id="summer_ping" class="mono">&nbsp;</span>

        <div class="container">
          {{#request_path_slug}}
          {{#GET.profile}}
          <span title="📋 {{ l.a_copy_tit }}" onclick="javascript:GSC.CopyThisText(this)" class="hover"
            data-copy="{{ BASE }}{{ lang }}/exportHTML/{{ GET.profile }}{{ request_path_slug }}">📋</span>
          &nbsp;
          <a target=_blank
            href="{{ BASE }}{{ lang }}/exportHTML/{{ GET.profile }}{{ request_path_slug }}">🌍 exportHTML</a>
          &nbsp;
          <span title="📋 Remote Content for WordPress" onclick="javascript:GSC.CopyThisText(this)" class="hover"
            data-copy=\'[remote_content url="{{ BASE }}{{ lang }}/exportHTML/{{ GET.profile }}{{ request_path_slug }}"]\'>📋&nbsp;RCWP</span>&nbsp;&nbsp;
          {{/GET.profile}}

          {{^GET.profile}}
          <span title="📋 {{ l.a_copy_tit }}" onclick="javascript:GSC.CopyThisText(this)" class="hover"
            data-copy="{{ BASE }}{{ lang }}/exportHTML/default{{ request_path_slug }}">📋</span>
          &nbsp;
          <a target=_blank
            href="{{ BASE }}{{ lang }}/exportHTML/default{{ request_path_slug }}">🌍 exportHTML</a>
          &nbsp;
          <span title="📋 Remote Content for WordPress" onclick="javascript:GSC.CopyThisText(this)" class="hover"
            data-copy=\'[remote_content url="{{ BASE }}{{ lang }}/exportHTML/default{{ request_path_slug }}"]\'>📋&nbsp;RCWP</span>&nbsp;&nbsp;
          {{/GET.profile}}
          {{/request_path_slug}}

          {{^request_path_slug}}
          {{#GET.profile}}
          <span title="📋 {{ l.a_copy_tit }}" onclick="javascript:GSC.CopyThisText(this)" class="hover"
            data-copy="{{ BASE }}{{ lang }}/exportHTML/{{ GET.profile }}/!">📋</span>
          &nbsp;
          <a target=_blank
            href="{{ BASE }}{{ lang }}/exportHTML/{{ GET.profile }}/!">🌍 exportHTML</a>
          &nbsp;
          <span title="📋 Remote Content for WordPress" onclick="javascript:GSC.CopyThisText(this)" class="hover"
            data-copy=\'[remote_content url="{{ BASE }}{{ lang }}/exportHTML/{{ GET.profile }}/!"]\'>📋&nbsp;RCWP</span>&nbsp;&nbsp;
          {{/GET.profile}}

          {{^GET.profile}}
          <span title="📋 {{ l.a_copy_tit }}" onclick="javascript:GSC.CopyThisText(this)" class="hover"
            data-copy="{{ BASE }}{{ lang }}/exportHTML/default/!">📋</span>
          &nbsp;
          <a target=_blank
            href="{{ BASE }}{{ lang }}/exportHTML/default/!">🌍 exportHTML</a>
          &nbsp;
          <span title="📋 Remote Content for WordPress" onclick="javascript:GSC.CopyThisText(this)" class="hover"
            data-copy=\'[remote_content url="{{ BASE }}{{ lang }}/exportHTML/default/!"]\'>📋&nbsp;RCWP</span>&nbsp;&nbsp;
          {{/GET.profile}}
          {{/request_path_slug}}
        </div>

      </div>
    </div>

    <!-- CACHE -->
    <div class="col l4 m6 s12">
      <div class="row center extrapadding">
        <h5>{{ l.a_cache }}</h5>
        <div class="container">
          <span class="nowrap">default: <b>{{ cache_profiles.default }}</b></span>&nbsp;
          <span class="nowrap">CSV: <b>{{ cache_profiles.csv }}</b></span>&nbsp;
          <span class="nowrap">{{ l.a_limiter }}: <b>{{ CONST.LIMITER_MAXIMUM }}x</b> / <b>{{ cache_profiles.limiter }}</b></span>&nbsp;
          <span class="nowrap">{{ l.a_webpage }}: <b>{{ cache_profiles.page }}</b></span>
        </div>
        <div class="row center">
          <a id="a_update" style="margin:5px;" class="tooltipped waves-effect green waves-light btn"
            data-position="top" data-tooltip="{{ l.a_update_ttip }}">
            <i class="fab fa-google-drive"></i>
            {{ l.a_update }}</a>
          <a id="a_flush" style="margin:5px;" class="tooltipped waves-effect green waves-light btn"
            data-position="top" data-tooltip="{{ l.a_flush_ttip }}">
            <i class="fas fa-cloud-sun"></i>
            {{ l.a_flush }}</a>
        </div>
      </div>
      <div class="row center white hide-on-small-only">
        <div class="col s12 white">
          <label>{{ l.a_remotefns }}</label>
          <select id="RemoteFnSelect">
            <option value="" disabled selected>&hellip;</option>
            <option value="CoreUpdateRemote">Core Data Update</option>
            <option value="FlushCacheRemote">Flush Local Cache</option>
            <option value="RebuildNonceRemote">Rebuild Auth Nonce</option>
            <option value="RebuildSecureKeyRemote">Rebuild Cookie Secure Key</option>
            <option value="RebuildAdminKeyRemote">Rebuild Administration Secure Key</option>
          </select>
        </div>
      </div>

      <!-- PAGESPEED INSIGHTS -->
      <div class="hide-on-small-only">
        <div class="row center extrapadding">
          <h5>{{ l.a_optimizations }}&nbsp;<span id="psi_ping" class="mono">&nbsp;</span></h5>
          <p id="a_ps_insights_info"></p>
          <div id="psi_row" class="row center">
            <a id="a_ps_insights" class="tooltipped waves-effect green waves-light btn" data-position="top"
              data-tooltip="{{ l.a_ps_insights_ttip }}">
              <i class="fab fa-google"></i>
              {{ l.a_ps_insights }}</a>
          </div>
        </div>
      </div>

      <!-- GOOGLE -->
      <div class="">
        <div class="row center extrapadding hide-on-small-only">
          <div class="white-text">
            <h5>{{ l.a_google }} <i class="hover open_google fas fa-arrow-down blue-text"></i>
              <i class="hover close_google fas fa-arrow-up blue-text hide"></i></h5>
            <ul id="variables" class="mono hide">
              <li>GCP id: {{ gcp_project_id }}
                {{^gcp_project_id}}
                <i class="red-text fas fa-times"></i>
                {{/gcp_project_id}}
              </li>
              <li>Maps Location Query: {{ google.map_query }}
                {{^google.map_query}}
                <i class="red-text fas fa-times"></i>
                {{/google.map_query}}
              </li>
              <li>Maps API key: 
                {{#google.mapsapi_key}}
                <span title="{{ google.mapsapi_key }}" class="protect">{{ google.mapsapi_key }}</span>
                {{/google.mapsapi_key}}
                {{^google.mapsapi_key}}
                <i class="red-text fas fa-times"></i>
                {{/google.mapsapi_key}}
              </li>
              <li>Analytics UA: {{ google.ua }}
                {{^google.ua}}
                <i class="red-text fas fa-times"></i>
                {{/google.ua}}
              </li>
              <li>PageSpeed Insights API key:
                {{#google.pagespeedinsights_key}}
                <span title="{{ google.pagespeedinsights_key }}" class="protect">{{ google.pagespeedinsights_key }}</span>
                {{/google.pagespeedinsights_key}}
                {{^google.pagespeedinsights_key}}
                <i class="red-text fas fa-times"></i>
                {{/google.pagespeedinsights_key}}
              </li>
              {{^l.onesignal_appid}}
              <div class="row center red-text" style="margin-top:1em">
                <div class="container">
                  {{ l.a_onesignal_missing }}
                </div>
              </div>
              {{/l.onesignal_appid}}
            </ul>
          </div>
        </div>
      </div>

      <!-- CHANGELOG -->
      <div class="hide-on-small-only">
        <div class="row center extrapadding">
          <h5>{{ l.a_changes }} <i class="hover open_news fas fa-arrow-down blue-text"></i>
            <i class="hover close_news fas fa-arrow-up blue-text hide"></i></h5>
          <div id="news" class="row grey-text hide" style="margin-top:1em">
            <div class="grey-text left-align container">
              {{ l.a_changelog }}
            </div>
          </div>
        </div>
      </div>

      <!-- ICON BUTTONS -->
      <h4 class="center">
        <a title="{{ l.a_github_ttip }}" rel="noreferrer noopener" target="_blank" class="tooltipped blue-text text" data-position="top"
          data-tooltip="{{ l.a_github_ttip }}" href="https://github.com/gscloud"><i class="fab fa-git"></i></a>
        <a title="{{ l.a_sysinfo_ttip }}" rel="noreferrer noopener" target="_blank" class="tooltipped orange-text text" data-position="top"
          data-tooltip="{{ l.a_sysinfo_ttip }}" href="https://sys.gscloud.cz">
          <i class="fas fa-server"></i></a>
        <a title="{{ l.a_lasagna_manual_ttip }}" rel="noreferrer noopener" target="_blank" class="tooltipped red-text text"
          data-position="top" data-tooltip="{{ l.a_lasagna_manual_ttip }}" href="{{ l.a_lasagna_manual_url }}">
          <i class="fas fa-dna"></i></a>
        <a title="{{ l.a_locale_template_ttip }}" rel="noreferrer noopener" target="_blank" class="tooltipped white-text text" data-position="top"
          data-tooltip="{{ l.a_locale_template_ttip }}" href="{{ l.a_locale_template_url }}">
          <i class="fas fa-clone"></i></a>
        <a title="{{ l.a_php_ttip }}" rel="noreferrer noopener" target="_blank" class="tooltipped blue-text text" data-position="top"
          data-tooltip="{{ l.a_php_ttip }}" href="https://php.gscloud.cz" style="font-size:0.8em">
          <span class="php1">p</span><span class="php2">h</span><span class="php3">p</span></a>
        {{#google_drive_backup}}
        <a title="{{ l.a_google_backup_ttip }}" rel="noreferrer noopener" target="_blank" class="tooltipped brown-text text" data-position="top"
          data-tooltip="{{ l.a_google_backup_ttip }}" href="{{ google_drive_backup }}">
          <i class="fas fa-warehouse"></i></a>
        {{/google_drive_backup}}
      </h4>

    </div>

    <!-- PERMISSIONS -->
    <div class="col l4 m6 s12">

      <!-- current user -->
      <div class="row center">
        <h5>{{ l.a_groups_permissions }}</h5>
        <strong>{{user.name}}</strong><br>
        <i style="font-size:smaller">{{user.email}}</i><br>
        <!--
        <a id="a_getcode" class="btnmargin waves-effect blue waves-light btn"
          data-position="top" data-tooltip="">📲</a>
        <a id="a_delcode" class="btnmargin waves-effect red waves-light btn"
          data-position="top" data-tooltip="">📴</a>
        <br>
        -->
        <a title="{{ l.a_logout_ttip }}" id="a_logout" class="tooltipped waves-effect green waves-light btn"
          data-position="top" data-tooltip="{{ l.a_logout_ttip }}">
          <i class="fas fa-sign-out-alt"></i>
          {{ l.a_logout }}</a>
        <a title="auditlog" target="_blank" ref="nofollow" href="/admin/AuditLog" class="waves-effect blue waves-light btn">
          <i class="fas fa-list"></i></a>
        <br>
        <a title="{{ l.a_clear_browser_ttip }}" id="a_clearbrowserdata" style="margin:5px;" class="tooltipped waves-effect red waves-light btn"
          data-position="top" data-tooltip="{{ l.a_clear_browser_ttip }}">
          <i class="fas fa-power-off"></i>
          {{ l.a_clear_browser }}</a>
      </div>

      <div class="row center extrapadding">
        <div class="white-text">
          <div class="row center hide-on-small-only">
            <strong>ADMIN</strong>
            <div class="container">
              <p class="orange-text">{{#admin_groups.admin}}{{ . }} {{/admin_groups.admin}}
                {{^admin_groups.admin}}<i class="red-text fas fa-times"></i>{{/admin_groups.admin}}</p>
            </div>
            <strong>EDITOR</strong>
            <div class="container">
              <p class="orange-text">{{#admin_groups.editor}}{{ . }} {{/admin_groups.editor}}
                {{^admin_groups.editor}}<i class="red-text fas fa-times"></i>{{/admin_groups.editor}}</p>
            </div>
            <strong>TESTER</strong>
            <div class="container">
              <p class="orange-text">{{#admin_groups.tester}}{{ . }} {{/admin_groups.tester}}
                {{^admin_groups.tester}}<i class="red-text fas fa-times"></i>{{/admin_groups.tester}}</p>
            </div>
            <strong>DEFAULT</strong>
            <div class="container">
              <p class="orange-text">{{#admin_groups.default}}{{ . }} {{/admin_groups.default}}
                {{^admin_groups.default}}<i class="red-text fas fa-times"></i>{{/admin_groups.default}}</p>
            </div>
          </div>
        </div>
      </div>

    </div>
  </div>

  <!-- UPLOADS -->
  <div id="a_uploader_progress"></div>
  <div id="a_file_manager"></div>

</div>

<script>
{{>admin_main.js.mustache}}
</script>

<!-- SUMMERNOTE -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.58.3/codemirror.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.58.3/theme/material-darker.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.58.3/addon/display/fullscreen.min.css" rel="stylesheet">
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.58.3/codemirror.min.js" defer></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.58.3/mode/xml/xml.min.js" defer></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.58.3/addon/display/fullscreen.min.js" defer></script>
<link href="{{ cdn }}/summernote/summernote-lite.min.css" rel="stylesheet">
<script src="{{ cdn }}/summernote/summernote-lite.min.js" defer></script>
{{#langcs}}<script src="{{ cdn }}/summernote/lang/summernote-cs-CZ.min.js" defer></script>{{/langcs}}

<!-- MOMENT -->
<script src="{{ cdn }}/js/moment-with-locales.min.js" defer></script>

<!-- ZEROUPLOAD -->
<script src="{{ cdn }}/js/zeroupload.min.js" defer></script>
';
            $result = call_user_func($value, $source, $this->lambdaHelper);
            if (strpos($result, '{{') === false) {
                $buffer .= $result;
            } else {
                $buffer .= $this->mustache
                    ->loadLambda((string) $result)
                    ->renderInternal($context);
            }
        } elseif (!empty($value)) {
            $values = $this->isIterable($value) ? $value : array($value);
            foreach ($values as $value) {
                $context->push($value);
                
                $buffer .= $indent . '<style>
';
                $buffer .= $indent . '/* PHP LOGO */
';
                $buffer .= $indent . '.php1{position:relative;left:+0.1em;text-transform:lowercase!important}
';
                $buffer .= $indent . '.php2{position:relative;left:+0.0em;text-transform:lowercase!important}
';
                $buffer .= $indent . '.php3{position:relative;left:-0.1em;text-transform:lowercase!important}
';
                $buffer .= $indent . '
';
                $buffer .= $indent . '/* EMOJIS */
';
                $buffer .= $indent . '.bigemoji{font-size:5em}
';
                $buffer .= $indent . '.emoji-list i {font-style: normal!important}
';
                $buffer .= $indent . '.emoji-list {min-width: 400px;padding:5px;overflow:scroll;display:inline-block;cursor:pointer;margin:1px}
';
                $buffer .= $indent . '@media (max-width:599px) { /* smaller box for mobiles */
';
                $buffer .= $indent . '  .emoji-list * {margin: 5px}
';
                $buffer .= $indent . '  .emoji-list {min-width: 300px!important}
';
                $buffer .= $indent . '}
';
                $buffer .= $indent . '@media (min-width:600px) { /* bigger box */
';
                $buffer .= $indent . '  .emoji-list * {margin: 2px}
';
                $buffer .= $indent . '  .emoji-list {min-width: 400px!important}
';
                $buffer .= $indent . '}
';
                $buffer .= $indent . '@media (max-width:1023px) { /* fixed box position to the left for mobiles and tablets */
';
                $buffer .= $indent . '  .emoji-list {position:relative!important;left:0!important}
';
                $buffer .= $indent . '}
';
                $buffer .= $indent . '
';
                $buffer .= $indent . '/* ADMIN PANEL */
';
                $buffer .= $indent . 'label{color:#000;font-weight:bold}
';
                $buffer .= $indent . '#admin_main{font-family:Arial!important;padding-top:5px;font-size:14px!important}
';
                $buffer .= $indent . '#admin_main .row{margin-bottom:5px}
';
                $buffer .= $indent . '#admin_main h2,#admin_main h3,#admin_main h4,#admin_main h5,#admin_main h6{font-family:Arial!important;text-transform:uppercase}
';
                $buffer .= $indent . '.a_reset{font-family:Arial!important;font-size:14px!important}
';
                $buffer .= $indent . '.a_h2{font-size:5em!important;font-weight:700!important}
';
                $buffer .= $indent . '.a_h3{font-size:4em!important;font-weight:700!important}
';
                $buffer .= $indent . '.a_h4{font-size:3em!important;font-weight:700!important}
';
                $buffer .= $indent . '.a_h5{font-size:2em!important;font-weight:700!important}
';
                $buffer .= $indent . '.btnmargin{margin:2px;margin-bottom:5px}
';
                $buffer .= $indent . '.dragover{border:4px dashed blue!important}
';
                $buffer .= $indent . '.extrapadding{padding:5px;border-radius:5px}
';
                $buffer .= $indent . '.hover{cursor:pointer}
';
                $buffer .= $indent . '.nowrap{white-space:nowrap}
';
                $buffer .= $indent . '.protect{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:inline-block;width:10em;line-height:12px}
';
                $buffer .= $indent . '.mobilebutt{font-size:1em}
';
                $buffer .= $indent . '
';
                $buffer .= $indent . '/* ROTATION & TOUCH */
';
                $buffer .= $indent . '#a_rotate_device{display:none}
';
                $buffer .= $indent . '[touch="true"] #a_rotate_device{display:block}
';
                $buffer .= $indent . '
';
                $buffer .= $indent . '/* SUMMERNOTE */
';
                $buffer .= $indent . '.summernote{border:2px dashed #ccc;padding:1rem!important}
';
                $buffer .= $indent . '.summernote::before{content:"📝";position:relative;top:-3rem;left:-1rem}
';
                $buffer .= $indent . '.panel-heading.note-toolbar .note-font .dropdown-menu,.panel-heading.note-toolbar .note-style .dropdown-menu{min-width:245px;padding:5px}
';
                $buffer .= $indent . '.panel-heading.note-toolbar .note-font .dropdown-menu>div:first-child,.panel-heading.note-toolbar .note-style .dropdown-menu>div:first-child{margin-right:5px}
';
                $buffer .= $indent . '.note-add-text-tags-btn{font-family:"Times New Roman",serif;min-width:30px}
';
                $buffer .= $indent . 'div.checkbox.sn-checkbox-open-in-new-window>label>input[type=checkbox]{opacity:1!important;position:relative!important;margin:5px!important}
';
                $buffer .= $indent . 'div.checkbox.sn-checkbox-use-protocol>label>input[type=checkbox]{opacity:1!important;position:relative!important;margin:5px!important}
';
                $buffer .= $indent . '</style>
';
                $buffer .= $indent . '
';
                $buffer .= $indent . '<!-- MOTÝLE -->
';
                $buffer .= $indent . '<span style="position:fixed;left:0;top:0;z-index:999999" class="motyle btn white hide-on-med-and-down">🦋</span>
';
                $buffer .= $indent . '<span style="position:fixed;right:0;top:0;z-index:999999" class="motyle btn white hide-on-large-only">🦋</span>
';
                $buffer .= $indent . '
';
                $buffer .= $indent . '<!-- ADMIN PANEL -->
';
                $buffer .= $indent . '<div id="admin_main" class="row center black white-text" style="display:none;margin:0!important">
';
                $buffer .= $indent . '
';
                $buffer .= $indent . '  <!-- DEVICE ROTATION INFO -->
';
                $buffer .= $indent . '  <div id="a_rotate_device" class="row center" style="padding-top:3px">
';
                $buffer .= $indent . '    ';
                $value = $this->resolveValue($context->findDot('l.a_rotate_device'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '
';
                $buffer .= $indent . '  </div>
';
                $buffer .= $indent . '
';
                $buffer .= $indent . '  <!-- CUSTOM ADMIN PANEL -->
';
                if ($partial = $this->mustache->loadPartial('admin_custom')) {
                    $buffer .= $partial->renderInternal($context, $indent . '  ');
                }
                $buffer .= $indent . '
';
                $buffer .= $indent . '  <!-- EXTERNAL SERVICES -->
';
                $buffer .= $indent . '  <div class="row center black hide-on-small-only">
';
                $buffer .= $indent . '    <div class="extrapadding hide-on-small-only" style="padding-top:3px">
';
                $buffer .= $indent . '      <a style="margin:2px;" class="tooltipped waves-effect teal waves-light btn" target="_blank" rel="noopener"
';
                $buffer .= $indent . '        data-position="top" data-tooltip="';
                $value = $this->resolveValue($context->findDot('l.a_google_account_ttip'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '" href="https://myaccount.google.com/dashboard">
';
                $buffer .= $indent . '        <i class="fab fa-google"></i>
';
                $buffer .= $indent . '        ';
                $value = $this->resolveValue($context->findDot('l.a_google_account'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '</a>
';
                $buffer .= $indent . '      <a style="margin:2px;" class="tooltipped waves-effect teal waves-light btn" target="_blank" rel="noopener"
';
                $buffer .= $indent . '        data-position="top" data-tooltip="';
                $value = $this->resolveValue($context->findDot('l.a_google_password_ttip'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '" href="https://passwords.google.com">
';
                $buffer .= $indent . '        <i class="fab fa-google"></i>
';
                $buffer .= $indent . '        ';
                $value = $this->resolveValue($context->findDot('l.a_google_password'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '</a>
';
                $buffer .= $indent . '      <a style="margin:2px;" class="tooltipped waves-effect teal waves-light btn" target="_blank" rel="noopener"
';
                $buffer .= $indent . '        data-position="top" data-tooltip="';
                $value = $this->resolveValue($context->findDot('l.a_google_search_ttip'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '"
';
                $buffer .= $indent . '        href="https://search.google.com/search-console?resource_id=';
                $value = $this->resolveValue($context->find('canonical_url'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '">
';
                $buffer .= $indent . '        <i class="fab fa-google"></i>
';
                $buffer .= $indent . '        ';
                $value = $this->resolveValue($context->findDot('l.a_google_search'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '</a>
';
                $buffer .= $indent . '      <a style="margin:2px;" class="tooltipped waves-effect teal waves-light btn" target="_blank" rel="noopener"
';
                $buffer .= $indent . '        data-position="top" data-tooltip="';
                $value = $this->resolveValue($context->findDot('l.a_google_analytics_ttip'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '"
';
                $buffer .= $indent . '        href="';
                // 'google.analytics' section
                $value = $context->findDot('google.analytics');
                $buffer .= $this->section2018af295c837e3d60f856e821ba1913($context, $indent, $value);
                // 'google.analytics' inverted section
                $value = $context->findDot('google.analytics');
                if (empty($value)) {
                    
                    $buffer .= 'https://analytics.google.com/analytics/web/';
                }
                $buffer .= '">
';
                $buffer .= $indent . '        <i class="fab fa-google"></i>
';
                $buffer .= $indent . '        ';
                $value = $this->resolveValue($context->findDot('l.a_google_analytics'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '</a>
';
                $buffer .= $indent . '      <a style="margin:2px;" class="tooltipped waves-effect lime waves-light btn" target="_blank" rel="noopener"
';
                $buffer .= $indent . '        data-position="top" data-tooltip="';
                $value = $this->resolveValue($context->findDot('l.a_onesignal_ttip'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '" href="https://app.onesignal.com/login">
';
                $buffer .= $indent . '        <i class="fas fa-bell"></i>
';
                $buffer .= $indent . '        ';
                $value = $this->resolveValue($context->findDot('l.a_onesignal'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '</a>
';
                $buffer .= $indent . '    </div>
';
                $buffer .= $indent . '  </div>
';
                $buffer .= $indent . '
';
                $buffer .= $indent . '  <!-- EXTERNAL LINKS -->
';
                $buffer .= $indent . '  <div class="row center black">
';
                // 'external_links' section
                $value = $context->find('external_links');
                $buffer .= $this->sectionF2af4124a55301e96d00ff00eb122a2d($context, $indent, $value);
                $buffer .= $indent . '  </div>
';
                $buffer .= $indent . '
';
                $buffer .= $indent . '  <!-- ADMIN GRID -->
';
                $buffer .= $indent . '  <div class="row grid" style="overflow:hidden" style="padding-top:3px">
';
                $buffer .= $indent . '
';
                $buffer .= $indent . '    <!-- DATA -->
';
                $buffer .= $indent . '    <div class="col l4 m6 s12">
';
                $buffer .= $indent . '      <div class="row center extrapadding">
';
                $buffer .= $indent . '          <h5>';
                $value = $this->resolveValue($context->findDot('l.a_locales'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '&nbsp;<span id="csv_ping" class="mono">&nbsp;</span></h5>
';
                $buffer .= $indent . '        <p id="a_update_info"></p>
';
                $buffer .= $indent . '        <p style="font-size:10px!important">
';
                $buffer .= $indent . '          PHP ver. <b>';
                $value = $this->resolveValue($context->find('PHP_VERSION'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '</b><br>
';
                $buffer .= $indent . '          Tesseract LASAGNA 2.0<br>
';
                $buffer .= $indent . '          App ver. <b>';
                $value = $this->resolveValue($context->find('VERSION_SHORT'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '</b> / <b>';
                $value = $this->resolveValue($context->find('VERSION_DATE'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '</b> / rev. <b>';
                $value = $this->resolveValue($context->find('REVISIONS'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '</b><br>
';
                $buffer .= $indent . '        </p>
';
                $buffer .= $indent . '        <div class="col s12 white">
';
                $buffer .= $indent . '          <label>';
                $value = $this->resolveValue($context->findDot('l.a_profiles'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '</label>
';
                $buffer .= $indent . '          <select id="SiteSelect">
';
                $buffer .= $indent . '            <option value="" disabled selected>&hellip;</option>
';
                // 'multisite_names' section
                $value = $context->find('multisite_names');
                $buffer .= $this->sectionD9c02709c437112903eaef9f7995d97e($context, $indent, $value);
                $buffer .= $indent . '          </select>
';
                $buffer .= $indent . '        </div>
';
                $buffer .= $indent . '
';
                $buffer .= $indent . '        <div id="domains" style="font-size:12px!important;color:#888!important" class="container"></div>
';
                $buffer .= $indent . '
';
                $buffer .= $indent . '        <div class="col s12 white">
';
                $buffer .= $indent . '          <label>';
                $value = $this->resolveValue($context->findDot('l.a_articles'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '</label>
';
                $buffer .= $indent . '          <select id="ArticleURLSelect"></select>
';
                $buffer .= $indent . '        </div>
';
                $buffer .= $indent . '
';
                $buffer .= $indent . '        <a id="a_files"
';
                $buffer .= $indent . '          data-position="top" data-tooltip="';
                $value = $this->resolveValue($context->findDot('l.a_files_ttip'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '"
';
                $buffer .= $indent . '          style="margin:5px" class="tooltipped waves-effect blue waves btn"><i class="fas fa-archive"></i></a>
';
                $buffer .= $indent . '        <a id="a_upload"
';
                $buffer .= $indent . '          data-position="top" data-tooltip="';
                $value = $this->resolveValue($context->findDot('l.a_upload_ttip'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '"
';
                $buffer .= $indent . '          style="margin:5px" class="tooltipped waves-effect blue waves btn"><i class="fas fa-upload"></i></a>
';
                $buffer .= $indent . '        <a id="a_summernote"
';
                $buffer .= $indent . '          data-position="top" data-tooltip="';
                $value = $this->resolveValue($context->findDot('l.a_summernote_ttip'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '"
';
                $buffer .= $indent . '          style="margin:5px" class="tooltipped waves-effect green waves-light btn">
';
                $buffer .= $indent . '          <i class="fas fa-edit"></i>&nbsp;';
                $value = $this->resolveValue($context->findDot('l.a_summernote'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '</a>
';
                $buffer .= $indent . '        <a id="a_article"
';
                $buffer .= $indent . '          data-position="top" data-tooltip="';
                $value = $this->resolveValue($context->findDot('l.a_article_ttip'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '"
';
                $buffer .= $indent . '          style="margin:5px" class="tooltipped waves-effect green waves-light btn">
';
                $buffer .= $indent . '          <i class="fas fa-plus-square"></i>&nbsp;URL</a>&nbsp;<span id="summer_ping" class="mono">&nbsp;</span>
';
                $buffer .= $indent . '
';
                $buffer .= $indent . '        <div class="container">
';
                // 'request_path_slug' section
                $value = $context->find('request_path_slug');
                $buffer .= $this->sectionB32a178bff5c814b2b24768afa655fc8($context, $indent, $value);
                $buffer .= $indent . '
';
                // 'request_path_slug' inverted section
                $value = $context->find('request_path_slug');
                if (empty($value)) {
                    
                    // 'GET.profile' section
                    $value = $context->findDot('GET.profile');
                    $buffer .= $this->section4fc63fdf387f636e11d74c11b05cd5bc($context, $indent, $value);
                    $buffer .= $indent . '
';
                    // 'GET.profile' inverted section
                    $value = $context->findDot('GET.profile');
                    if (empty($value)) {
                        
                        $buffer .= $indent . '          <span title="📋 ';
                        $value = $this->resolveValue($context->findDot('l.a_copy_tit'), $context);
                        $buffer .= call_user_func($this->mustache->getEscape(), $value);
                        $buffer .= '" onclick="javascript:GSC.CopyThisText(this)" class="hover"
';
                        $buffer .= $indent . '            data-copy="';
                        $value = $this->resolveValue($context->find('BASE'), $context);
                        $buffer .= call_user_func($this->mustache->getEscape(), $value);
                        $value = $this->resolveValue($context->find('lang'), $context);
                        $buffer .= call_user_func($this->mustache->getEscape(), $value);
                        $buffer .= '/exportHTML/default/!">📋</span>
';
                        $buffer .= $indent . '          &nbsp;
';
                        $buffer .= $indent . '          <a target=_blank
';
                        $buffer .= $indent . '            href="';
                        $value = $this->resolveValue($context->find('BASE'), $context);
                        $buffer .= call_user_func($this->mustache->getEscape(), $value);
                        $value = $this->resolveValue($context->find('lang'), $context);
                        $buffer .= call_user_func($this->mustache->getEscape(), $value);
                        $buffer .= '/exportHTML/default/!">🌍 exportHTML</a>
';
                        $buffer .= $indent . '          &nbsp;
';
                        $buffer .= $indent . '          <span title="📋 Remote Content for WordPress" onclick="javascript:GSC.CopyThisText(this)" class="hover"
';
                        $buffer .= $indent . '            data-copy=\'[remote_content url="';
                        $value = $this->resolveValue($context->find('BASE'), $context);
                        $buffer .= call_user_func($this->mustache->getEscape(), $value);
                        $value = $this->resolveValue($context->find('lang'), $context);
                        $buffer .= call_user_func($this->mustache->getEscape(), $value);
                        $buffer .= '/exportHTML/default/!"]\'>📋&nbsp;RCWP</span>&nbsp;&nbsp;
';
                    }
                }
                $buffer .= $indent . '        </div>
';
                $buffer .= $indent . '
';
                $buffer .= $indent . '      </div>
';
                $buffer .= $indent . '    </div>
';
                $buffer .= $indent . '
';
                $buffer .= $indent . '    <!-- CACHE -->
';
                $buffer .= $indent . '    <div class="col l4 m6 s12">
';
                $buffer .= $indent . '      <div class="row center extrapadding">
';
                $buffer .= $indent . '        <h5>';
                $value = $this->resolveValue($context->findDot('l.a_cache'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '</h5>
';
                $buffer .= $indent . '        <div class="container">
';
                $buffer .= $indent . '          <span class="nowrap">default: <b>';
                $value = $this->resolveValue($context->findDot('cache_profiles.default'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '</b></span>&nbsp;
';
                $buffer .= $indent . '          <span class="nowrap">CSV: <b>';
                $value = $this->resolveValue($context->findDot('cache_profiles.csv'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '</b></span>&nbsp;
';
                $buffer .= $indent . '          <span class="nowrap">';
                $value = $this->resolveValue($context->findDot('l.a_limiter'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= ': <b>';
                $value = $this->resolveValue($context->findDot('CONST.LIMITER_MAXIMUM'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= 'x</b> / <b>';
                $value = $this->resolveValue($context->findDot('cache_profiles.limiter'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '</b></span>&nbsp;
';
                $buffer .= $indent . '          <span class="nowrap">';
                $value = $this->resolveValue($context->findDot('l.a_webpage'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= ': <b>';
                $value = $this->resolveValue($context->findDot('cache_profiles.page'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '</b></span>
';
                $buffer .= $indent . '        </div>
';
                $buffer .= $indent . '        <div class="row center">
';
                $buffer .= $indent . '          <a id="a_update" style="margin:5px;" class="tooltipped waves-effect green waves-light btn"
';
                $buffer .= $indent . '            data-position="top" data-tooltip="';
                $value = $this->resolveValue($context->findDot('l.a_update_ttip'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '">
';
                $buffer .= $indent . '            <i class="fab fa-google-drive"></i>
';
                $buffer .= $indent . '            ';
                $value = $this->resolveValue($context->findDot('l.a_update'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '</a>
';
                $buffer .= $indent . '          <a id="a_flush" style="margin:5px;" class="tooltipped waves-effect green waves-light btn"
';
                $buffer .= $indent . '            data-position="top" data-tooltip="';
                $value = $this->resolveValue($context->findDot('l.a_flush_ttip'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '">
';
                $buffer .= $indent . '            <i class="fas fa-cloud-sun"></i>
';
                $buffer .= $indent . '            ';
                $value = $this->resolveValue($context->findDot('l.a_flush'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '</a>
';
                $buffer .= $indent . '        </div>
';
                $buffer .= $indent . '      </div>
';
                $buffer .= $indent . '      <div class="row center white hide-on-small-only">
';
                $buffer .= $indent . '        <div class="col s12 white">
';
                $buffer .= $indent . '          <label>';
                $value = $this->resolveValue($context->findDot('l.a_remotefns'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '</label>
';
                $buffer .= $indent . '          <select id="RemoteFnSelect">
';
                $buffer .= $indent . '            <option value="" disabled selected>&hellip;</option>
';
                $buffer .= $indent . '            <option value="CoreUpdateRemote">Core Data Update</option>
';
                $buffer .= $indent . '            <option value="FlushCacheRemote">Flush Local Cache</option>
';
                $buffer .= $indent . '            <option value="RebuildNonceRemote">Rebuild Auth Nonce</option>
';
                $buffer .= $indent . '            <option value="RebuildSecureKeyRemote">Rebuild Cookie Secure Key</option>
';
                $buffer .= $indent . '            <option value="RebuildAdminKeyRemote">Rebuild Administration Secure Key</option>
';
                $buffer .= $indent . '          </select>
';
                $buffer .= $indent . '        </div>
';
                $buffer .= $indent . '      </div>
';
                $buffer .= $indent . '
';
                $buffer .= $indent . '      <!-- PAGESPEED INSIGHTS -->
';
                $buffer .= $indent . '      <div class="hide-on-small-only">
';
                $buffer .= $indent . '        <div class="row center extrapadding">
';
                $buffer .= $indent . '          <h5>';
                $value = $this->resolveValue($context->findDot('l.a_optimizations'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '&nbsp;<span id="psi_ping" class="mono">&nbsp;</span></h5>
';
                $buffer .= $indent . '          <p id="a_ps_insights_info"></p>
';
                $buffer .= $indent . '          <div id="psi_row" class="row center">
';
                $buffer .= $indent . '            <a id="a_ps_insights" class="tooltipped waves-effect green waves-light btn" data-position="top"
';
                $buffer .= $indent . '              data-tooltip="';
                $value = $this->resolveValue($context->findDot('l.a_ps_insights_ttip'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '">
';
                $buffer .= $indent . '              <i class="fab fa-google"></i>
';
                $buffer .= $indent . '              ';
                $value = $this->resolveValue($context->findDot('l.a_ps_insights'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '</a>
';
                $buffer .= $indent . '          </div>
';
                $buffer .= $indent . '        </div>
';
                $buffer .= $indent . '      </div>
';
                $buffer .= $indent . '
';
                $buffer .= $indent . '      <!-- GOOGLE -->
';
                $buffer .= $indent . '      <div class="">
';
                $buffer .= $indent . '        <div class="row center extrapadding hide-on-small-only">
';
                $buffer .= $indent . '          <div class="white-text">
';
                $buffer .= $indent . '            <h5>';
                $value = $this->resolveValue($context->findDot('l.a_google'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= ' <i class="hover open_google fas fa-arrow-down blue-text"></i>
';
                $buffer .= $indent . '              <i class="hover close_google fas fa-arrow-up blue-text hide"></i></h5>
';
                $buffer .= $indent . '            <ul id="variables" class="mono hide">
';
                $buffer .= $indent . '              <li>GCP id: ';
                $value = $this->resolveValue($context->find('gcp_project_id'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '
';
                // 'gcp_project_id' inverted section
                $value = $context->find('gcp_project_id');
                if (empty($value)) {
                    
                    $buffer .= $indent . '                <i class="red-text fas fa-times"></i>
';
                }
                $buffer .= $indent . '              </li>
';
                $buffer .= $indent . '              <li>Maps Location Query: ';
                $value = $this->resolveValue($context->findDot('google.map_query'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '
';
                // 'google.map_query' inverted section
                $value = $context->findDot('google.map_query');
                if (empty($value)) {
                    
                    $buffer .= $indent . '                <i class="red-text fas fa-times"></i>
';
                }
                $buffer .= $indent . '              </li>
';
                $buffer .= $indent . '              <li>Maps API key: 
';
                // 'google.mapsapi_key' section
                $value = $context->findDot('google.mapsapi_key');
                $buffer .= $this->sectionC5b46eec0542b5dcbedde6e466016efc($context, $indent, $value);
                // 'google.mapsapi_key' inverted section
                $value = $context->findDot('google.mapsapi_key');
                if (empty($value)) {
                    
                    $buffer .= $indent . '                <i class="red-text fas fa-times"></i>
';
                }
                $buffer .= $indent . '              </li>
';
                $buffer .= $indent . '              <li>Analytics UA: ';
                $value = $this->resolveValue($context->findDot('google.ua'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '
';
                // 'google.ua' inverted section
                $value = $context->findDot('google.ua');
                if (empty($value)) {
                    
                    $buffer .= $indent . '                <i class="red-text fas fa-times"></i>
';
                }
                $buffer .= $indent . '              </li>
';
                $buffer .= $indent . '              <li>PageSpeed Insights API key:
';
                // 'google.pagespeedinsights_key' section
                $value = $context->findDot('google.pagespeedinsights_key');
                $buffer .= $this->sectionE7e3bbf6ea802e675a80045c418a5a20($context, $indent, $value);
                // 'google.pagespeedinsights_key' inverted section
                $value = $context->findDot('google.pagespeedinsights_key');
                if (empty($value)) {
                    
                    $buffer .= $indent . '                <i class="red-text fas fa-times"></i>
';
                }
                $buffer .= $indent . '              </li>
';
                // 'l.onesignal_appid' inverted section
                $value = $context->findDot('l.onesignal_appid');
                if (empty($value)) {
                    
                    $buffer .= $indent . '              <div class="row center red-text" style="margin-top:1em">
';
                    $buffer .= $indent . '                <div class="container">
';
                    $buffer .= $indent . '                  ';
                    $value = $this->resolveValue($context->findDot('l.a_onesignal_missing'), $context);
                    $buffer .= call_user_func($this->mustache->getEscape(), $value);
                    $buffer .= '
';
                    $buffer .= $indent . '                </div>
';
                    $buffer .= $indent . '              </div>
';
                }
                $buffer .= $indent . '            </ul>
';
                $buffer .= $indent . '          </div>
';
                $buffer .= $indent . '        </div>
';
                $buffer .= $indent . '      </div>
';
                $buffer .= $indent . '
';
                $buffer .= $indent . '      <!-- CHANGELOG -->
';
                $buffer .= $indent . '      <div class="hide-on-small-only">
';
                $buffer .= $indent . '        <div class="row center extrapadding">
';
                $buffer .= $indent . '          <h5>';
                $value = $this->resolveValue($context->findDot('l.a_changes'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= ' <i class="hover open_news fas fa-arrow-down blue-text"></i>
';
                $buffer .= $indent . '            <i class="hover close_news fas fa-arrow-up blue-text hide"></i></h5>
';
                $buffer .= $indent . '          <div id="news" class="row grey-text hide" style="margin-top:1em">
';
                $buffer .= $indent . '            <div class="grey-text left-align container">
';
                $buffer .= $indent . '              ';
                $value = $this->resolveValue($context->findDot('l.a_changelog'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '
';
                $buffer .= $indent . '            </div>
';
                $buffer .= $indent . '          </div>
';
                $buffer .= $indent . '        </div>
';
                $buffer .= $indent . '      </div>
';
                $buffer .= $indent . '
';
                $buffer .= $indent . '      <!-- ICON BUTTONS -->
';
                $buffer .= $indent . '      <h4 class="center">
';
                $buffer .= $indent . '        <a title="';
                $value = $this->resolveValue($context->findDot('l.a_github_ttip'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '" rel="noreferrer noopener" target="_blank" class="tooltipped blue-text text" data-position="top"
';
                $buffer .= $indent . '          data-tooltip="';
                $value = $this->resolveValue($context->findDot('l.a_github_ttip'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '" href="https://github.com/gscloud"><i class="fab fa-git"></i></a>
';
                $buffer .= $indent . '        <a title="';
                $value = $this->resolveValue($context->findDot('l.a_sysinfo_ttip'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '" rel="noreferrer noopener" target="_blank" class="tooltipped orange-text text" data-position="top"
';
                $buffer .= $indent . '          data-tooltip="';
                $value = $this->resolveValue($context->findDot('l.a_sysinfo_ttip'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '" href="https://sys.gscloud.cz">
';
                $buffer .= $indent . '          <i class="fas fa-server"></i></a>
';
                $buffer .= $indent . '        <a title="';
                $value = $this->resolveValue($context->findDot('l.a_lasagna_manual_ttip'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '" rel="noreferrer noopener" target="_blank" class="tooltipped red-text text"
';
                $buffer .= $indent . '          data-position="top" data-tooltip="';
                $value = $this->resolveValue($context->findDot('l.a_lasagna_manual_ttip'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '" href="';
                $value = $this->resolveValue($context->findDot('l.a_lasagna_manual_url'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '">
';
                $buffer .= $indent . '          <i class="fas fa-dna"></i></a>
';
                $buffer .= $indent . '        <a title="';
                $value = $this->resolveValue($context->findDot('l.a_locale_template_ttip'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '" rel="noreferrer noopener" target="_blank" class="tooltipped white-text text" data-position="top"
';
                $buffer .= $indent . '          data-tooltip="';
                $value = $this->resolveValue($context->findDot('l.a_locale_template_ttip'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '" href="';
                $value = $this->resolveValue($context->findDot('l.a_locale_template_url'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '">
';
                $buffer .= $indent . '          <i class="fas fa-clone"></i></a>
';
                $buffer .= $indent . '        <a title="';
                $value = $this->resolveValue($context->findDot('l.a_php_ttip'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '" rel="noreferrer noopener" target="_blank" class="tooltipped blue-text text" data-position="top"
';
                $buffer .= $indent . '          data-tooltip="';
                $value = $this->resolveValue($context->findDot('l.a_php_ttip'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '" href="https://php.gscloud.cz" style="font-size:0.8em">
';
                $buffer .= $indent . '          <span class="php1">p</span><span class="php2">h</span><span class="php3">p</span></a>
';
                // 'google_drive_backup' section
                $value = $context->find('google_drive_backup');
                $buffer .= $this->section8eee11804dcd2f5beefb9520545f9321($context, $indent, $value);
                $buffer .= $indent . '      </h4>
';
                $buffer .= $indent . '
';
                $buffer .= $indent . '    </div>
';
                $buffer .= $indent . '
';
                $buffer .= $indent . '    <!-- PERMISSIONS -->
';
                $buffer .= $indent . '    <div class="col l4 m6 s12">
';
                $buffer .= $indent . '
';
                $buffer .= $indent . '      <!-- current user -->
';
                $buffer .= $indent . '      <div class="row center">
';
                $buffer .= $indent . '        <h5>';
                $value = $this->resolveValue($context->findDot('l.a_groups_permissions'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '</h5>
';
                $buffer .= $indent . '        <strong>';
                $value = $this->resolveValue($context->findDot('user.name'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '</strong><br>
';
                $buffer .= $indent . '        <i style="font-size:smaller">';
                $value = $this->resolveValue($context->findDot('user.email'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '</i><br>
';
                $buffer .= $indent . '        <!--
';
                $buffer .= $indent . '        <a id="a_getcode" class="btnmargin waves-effect blue waves-light btn"
';
                $buffer .= $indent . '          data-position="top" data-tooltip="">📲</a>
';
                $buffer .= $indent . '        <a id="a_delcode" class="btnmargin waves-effect red waves-light btn"
';
                $buffer .= $indent . '          data-position="top" data-tooltip="">📴</a>
';
                $buffer .= $indent . '        <br>
';
                $buffer .= $indent . '        -->
';
                $buffer .= $indent . '        <a title="';
                $value = $this->resolveValue($context->findDot('l.a_logout_ttip'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '" id="a_logout" class="tooltipped waves-effect green waves-light btn"
';
                $buffer .= $indent . '          data-position="top" data-tooltip="';
                $value = $this->resolveValue($context->findDot('l.a_logout_ttip'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '">
';
                $buffer .= $indent . '          <i class="fas fa-sign-out-alt"></i>
';
                $buffer .= $indent . '          ';
                $value = $this->resolveValue($context->findDot('l.a_logout'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '</a>
';
                $buffer .= $indent . '        <a title="auditlog" target="_blank" ref="nofollow" href="/admin/AuditLog" class="waves-effect blue waves-light btn">
';
                $buffer .= $indent . '          <i class="fas fa-list"></i></a>
';
                $buffer .= $indent . '        <br>
';
                $buffer .= $indent . '        <a title="';
                $value = $this->resolveValue($context->findDot('l.a_clear_browser_ttip'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '" id="a_clearbrowserdata" style="margin:5px;" class="tooltipped waves-effect red waves-light btn"
';
                $buffer .= $indent . '          data-position="top" data-tooltip="';
                $value = $this->resolveValue($context->findDot('l.a_clear_browser_ttip'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '">
';
                $buffer .= $indent . '          <i class="fas fa-power-off"></i>
';
                $buffer .= $indent . '          ';
                $value = $this->resolveValue($context->findDot('l.a_clear_browser'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '</a>
';
                $buffer .= $indent . '      </div>
';
                $buffer .= $indent . '
';
                $buffer .= $indent . '      <div class="row center extrapadding">
';
                $buffer .= $indent . '        <div class="white-text">
';
                $buffer .= $indent . '          <div class="row center hide-on-small-only">
';
                $buffer .= $indent . '            <strong>ADMIN</strong>
';
                $buffer .= $indent . '            <div class="container">
';
                $buffer .= $indent . '              <p class="orange-text">';
                // 'admin_groups.admin' section
                $value = $context->findDot('admin_groups.admin');
                $buffer .= $this->section90a107d07b7ceda223cc86a30431895b($context, $indent, $value);
                $buffer .= '
';
                $buffer .= $indent . '                ';
                // 'admin_groups.admin' inverted section
                $value = $context->findDot('admin_groups.admin');
                if (empty($value)) {
                    
                    $buffer .= '<i class="red-text fas fa-times"></i>';
                }
                $buffer .= '</p>
';
                $buffer .= $indent . '            </div>
';
                $buffer .= $indent . '            <strong>EDITOR</strong>
';
                $buffer .= $indent . '            <div class="container">
';
                $buffer .= $indent . '              <p class="orange-text">';
                // 'admin_groups.editor' section
                $value = $context->findDot('admin_groups.editor');
                $buffer .= $this->section90a107d07b7ceda223cc86a30431895b($context, $indent, $value);
                $buffer .= '
';
                $buffer .= $indent . '                ';
                // 'admin_groups.editor' inverted section
                $value = $context->findDot('admin_groups.editor');
                if (empty($value)) {
                    
                    $buffer .= '<i class="red-text fas fa-times"></i>';
                }
                $buffer .= '</p>
';
                $buffer .= $indent . '            </div>
';
                $buffer .= $indent . '            <strong>TESTER</strong>
';
                $buffer .= $indent . '            <div class="container">
';
                $buffer .= $indent . '              <p class="orange-text">';
                // 'admin_groups.tester' section
                $value = $context->findDot('admin_groups.tester');
                $buffer .= $this->section90a107d07b7ceda223cc86a30431895b($context, $indent, $value);
                $buffer .= '
';
                $buffer .= $indent . '                ';
                // 'admin_groups.tester' inverted section
                $value = $context->findDot('admin_groups.tester');
                if (empty($value)) {
                    
                    $buffer .= '<i class="red-text fas fa-times"></i>';
                }
                $buffer .= '</p>
';
                $buffer .= $indent . '            </div>
';
                $buffer .= $indent . '            <strong>DEFAULT</strong>
';
                $buffer .= $indent . '            <div class="container">
';
                $buffer .= $indent . '              <p class="orange-text">';
                // 'admin_groups.default' section
                $value = $context->findDot('admin_groups.default');
                $buffer .= $this->section90a107d07b7ceda223cc86a30431895b($context, $indent, $value);
                $buffer .= '
';
                $buffer .= $indent . '                ';
                // 'admin_groups.default' inverted section
                $value = $context->findDot('admin_groups.default');
                if (empty($value)) {
                    
                    $buffer .= '<i class="red-text fas fa-times"></i>';
                }
                $buffer .= '</p>
';
                $buffer .= $indent . '            </div>
';
                $buffer .= $indent . '          </div>
';
                $buffer .= $indent . '        </div>
';
                $buffer .= $indent . '      </div>
';
                $buffer .= $indent . '
';
                $buffer .= $indent . '    </div>
';
                $buffer .= $indent . '  </div>
';
                $buffer .= $indent . '
';
                $buffer .= $indent . '  <!-- UPLOADS -->
';
                $buffer .= $indent . '  <div id="a_uploader_progress"></div>
';
                $buffer .= $indent . '  <div id="a_file_manager"></div>
';
                $buffer .= $indent . '
';
                $buffer .= $indent . '</div>
';
                $buffer .= $indent . '
';
                $buffer .= $indent . '<script>
';
                if ($partial = $this->mustache->loadPartial('admin_main.js.mustache')) {
                    $buffer .= $partial->renderInternal($context);
                }
                $buffer .= $indent . '</script>
';
                $buffer .= $indent . '
';
                $buffer .= $indent . '<!-- SUMMERNOTE -->
';
                $buffer .= $indent . '<link href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.58.3/codemirror.min.css" rel="stylesheet">
';
                $buffer .= $indent . '<link href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.58.3/theme/material-darker.min.css" rel="stylesheet">
';
                $buffer .= $indent . '<link href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.58.3/addon/display/fullscreen.min.css" rel="stylesheet">
';
                $buffer .= $indent . '<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.58.3/codemirror.min.js" defer></script>
';
                $buffer .= $indent . '<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.58.3/mode/xml/xml.min.js" defer></script>
';
                $buffer .= $indent . '<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.58.3/addon/display/fullscreen.min.js" defer></script>
';
                $buffer .= $indent . '<link href="';
                $value = $this->resolveValue($context->find('cdn'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '/summernote/summernote-lite.min.css" rel="stylesheet">
';
                $buffer .= $indent . '<script src="';
                $value = $this->resolveValue($context->find('cdn'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '/summernote/summernote-lite.min.js" defer></script>
';
                // 'langcs' section
                $value = $context->find('langcs');
                $buffer .= $this->section55e47f068fec12184963a64973b36dbd($context, $indent, $value);
                $buffer .= '
';
                $buffer .= $indent . '
';
                $buffer .= $indent . '<!-- MOMENT -->
';
                $buffer .= $indent . '<script src="';
                $value = $this->resolveValue($context->find('cdn'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '/js/moment-with-locales.min.js" defer></script>
';
                $buffer .= $indent . '
';
                $buffer .= $indent . '<!-- ZEROUPLOAD -->
';
                $buffer .= $indent . '<script src="';
                $value = $this->resolveValue($context->find('cdn'), $context);
                $buffer .= call_user_func($this->mustache->getEscape(), $value);
                $buffer .= '/js/zeroupload.min.js" defer></script>
';
                $context->pop();
            }
        }
    
        return $buffer;
    }

    private function section58b946eb292fa18b858a52771206644f(Mustache_Context $context, $indent, $value)
    {
        $buffer = '';
    
        if (!is_string($value) && is_callable($value)) {
            $source = '
{{>editor_main}}
';
            $result = call_user_func($value, $source, $this->lambdaHelper);
            if (strpos($result, '{{') === false) {
                $buffer .= $result;
            } else {
                $buffer .= $this->mustache
                    ->loadLambda((string) $result)
                    ->renderInternal($context);
            }
        } elseif (!empty($value)) {
            $values = $this->isIterable($value) ? $value : array($value);
            foreach ($values as $value) {
                $context->push($value);
                
                if ($partial = $this->mustache->loadPartial('editor_main')) {
                    $buffer .= $partial->renderInternal($context);
                }
                $context->pop();
            }
        }
    
        return $buffer;
    }

    private function sectionF67ca9f1380367445e3d9f8034a44e39(Mustache_Context $context, $indent, $value)
    {
        $buffer = '';
    
        if (!is_string($value) && is_callable($value)) {
            $source = '
{{>tester_main}}
';
            $result = call_user_func($value, $source, $this->lambdaHelper);
            if (strpos($result, '{{') === false) {
                $buffer .= $result;
            } else {
                $buffer .= $this->mustache
                    ->loadLambda((string) $result)
                    ->renderInternal($context);
            }
        } elseif (!empty($value)) {
            $values = $this->isIterable($value) ? $value : array($value);
            foreach ($values as $value) {
                $context->push($value);
                
                if ($partial = $this->mustache->loadPartial('tester_main')) {
                    $buffer .= $partial->renderInternal($context);
                }
                $context->pop();
            }
        }
    
        return $buffer;
    }

}
";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:0:{}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:1:{s:53:"\__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7";O:35:"phpDocumentor\Reflection\Php\Class_":11:{s:42:" phpDocumentor\Reflection\Php\Class_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:53:"\__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7";s:36:" phpDocumentor\Reflection\Fqsen name";s:52:"__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7";}s:45:" phpDocumentor\Reflection\Php\Class_ docBlock";N;s:45:" phpDocumentor\Reflection\Php\Class_ abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Class_ final";b:0;s:43:" phpDocumentor\Reflection\Php\Class_ parent";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:18:"\Mustache_Template";s:36:" phpDocumentor\Reflection\Fqsen name";s:17:"Mustache_Template";}s:47:" phpDocumentor\Reflection\Php\Class_ implements";a:0:{}s:46:" phpDocumentor\Reflection\Php\Class_ constants";a:0:{}s:47:" phpDocumentor\Reflection\Php\Class_ properties";a:1:{s:68:"\__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7::$lambdaHelper";O:37:"phpDocumentor\Reflection\Php\Property":8:{s:44:" phpDocumentor\Reflection\Php\Property fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:68:"\__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7::$lambdaHelper";s:36:" phpDocumentor\Reflection\Fqsen name";s:12:"lambdaHelper";}s:47:" phpDocumentor\Reflection\Php\Property docBlock";N;s:44:" phpDocumentor\Reflection\Php\Property types";a:0:{}s:46:" phpDocumentor\Reflection\Php\Property default";N;s:45:" phpDocumentor\Reflection\Php\Property static";b:0;s:49:" phpDocumentor\Reflection\Php\Property visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:7:"private";}s:47:" phpDocumentor\Reflection\Php\Property location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:5;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:43:" phpDocumentor\Reflection\Php\Property type";N;}}s:44:" phpDocumentor\Reflection\Php\Class_ methods";a:15:{s:71:"\__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7::renderInternal()";O:35:"phpDocumentor\Reflection\Php\Method":9:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:71:"\__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7::renderInternal()";s:36:" phpDocumentor\Reflection\Fqsen name";s:14:"renderInternal";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:2:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:7:"context";s:43:" phpDocumentor\Reflection\Php\Argument type";O:38:"phpDocumentor\Reflection\Types\Object_":1:{s:45:" phpDocumentor\Reflection\Types\Object_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:17:"\Mustache_Context";s:36:" phpDocumentor\Reflection\Fqsen name";s:16:"Mustache_Context";}}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:1;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:6:"indent";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";s:2:"''";s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:7;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}}s:96:"\__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7::section2018af295c837e3d60f856e821ba1913()";O:35:"phpDocumentor\Reflection\Php\Method":9:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:96:"\__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7::section2018af295c837e3d60f856e821ba1913()";s:36:" phpDocumentor\Reflection\Fqsen name";s:39:"section2018af295c837e3d60f856e821ba1913";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:7:"private";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:3:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:7:"context";s:43:" phpDocumentor\Reflection\Php\Argument type";O:38:"phpDocumentor\Reflection\Types\Object_":1:{s:45:" phpDocumentor\Reflection\Types\Object_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:17:"\Mustache_Context";s:36:" phpDocumentor\Reflection\Fqsen name";s:16:"Mustache_Context";}}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:1;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:6:"indent";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:2;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:5:"value";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:29;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}}s:96:"\__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7::sectionF2af4124a55301e96d00ff00eb122a2d()";O:35:"phpDocumentor\Reflection\Php\Method":9:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:96:"\__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7::sectionF2af4124a55301e96d00ff00eb122a2d()";s:36:" phpDocumentor\Reflection\Fqsen name";s:39:"sectionF2af4124a55301e96d00ff00eb122a2d";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:7:"private";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:3:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:7:"context";s:43:" phpDocumentor\Reflection\Php\Argument type";O:38:"phpDocumentor\Reflection\Types\Object_":1:{s:45:" phpDocumentor\Reflection\Types\Object_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:17:"\Mustache_Context";s:36:" phpDocumentor\Reflection\Fqsen name";s:16:"Mustache_Context";}}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:1;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:6:"indent";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:2;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:5:"value";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:57;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}}s:96:"\__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7::sectionD9c02709c437112903eaef9f7995d97e()";O:35:"phpDocumentor\Reflection\Php\Method":9:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:96:"\__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7::sectionD9c02709c437112903eaef9f7995d97e()";s:36:" phpDocumentor\Reflection\Fqsen name";s:39:"sectionD9c02709c437112903eaef9f7995d97e";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:7:"private";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:3:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:7:"context";s:43:" phpDocumentor\Reflection\Php\Argument type";O:38:"phpDocumentor\Reflection\Types\Object_":1:{s:45:" phpDocumentor\Reflection\Types\Object_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:17:"\Mustache_Context";s:36:" phpDocumentor\Reflection\Fqsen name";s:16:"Mustache_Context";}}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:1;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:6:"indent";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:2;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:5:"value";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:99;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}}s:96:"\__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7::sectionA766412041036b24df5bc20ddd21d9a7()";O:35:"phpDocumentor\Reflection\Php\Method":9:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:96:"\__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7::sectionA766412041036b24df5bc20ddd21d9a7()";s:36:" phpDocumentor\Reflection\Fqsen name";s:39:"sectionA766412041036b24df5bc20ddd21d9a7";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:7:"private";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:3:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:7:"context";s:43:" phpDocumentor\Reflection\Php\Argument type";O:38:"phpDocumentor\Reflection\Types\Object_":1:{s:45:" phpDocumentor\Reflection\Types\Object_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:17:"\Mustache_Context";s:36:" phpDocumentor\Reflection\Fqsen name";s:16:"Mustache_Context";}}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:1;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:6:"indent";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:2;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:5:"value";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:135;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}}s:96:"\__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7::sectionB32a178bff5c814b2b24768afa655fc8()";O:35:"phpDocumentor\Reflection\Php\Method":9:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:96:"\__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7::sectionB32a178bff5c814b2b24768afa655fc8()";s:36:" phpDocumentor\Reflection\Fqsen name";s:39:"sectionB32a178bff5c814b2b24768afa655fc8";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:7:"private";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:3:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:7:"context";s:43:" phpDocumentor\Reflection\Php\Argument type";O:38:"phpDocumentor\Reflection\Types\Object_":1:{s:45:" phpDocumentor\Reflection\Types\Object_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:17:"\Mustache_Context";s:36:" phpDocumentor\Reflection\Fqsen name";s:16:"Mustache_Context";}}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:1;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:6:"indent";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:2;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:5:"value";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:219;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}}s:96:"\__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7::section4fc63fdf387f636e11d74c11b05cd5bc()";O:35:"phpDocumentor\Reflection\Php\Method":9:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:96:"\__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7::section4fc63fdf387f636e11d74c11b05cd5bc()";s:36:" phpDocumentor\Reflection\Fqsen name";s:39:"section4fc63fdf387f636e11d74c11b05cd5bc";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:7:"private";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:3:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:7:"context";s:43:" phpDocumentor\Reflection\Php\Argument type";O:38:"phpDocumentor\Reflection\Types\Object_":1:{s:45:" phpDocumentor\Reflection\Types\Object_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:17:"\Mustache_Context";s:36:" phpDocumentor\Reflection\Fqsen name";s:16:"Mustache_Context";}}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:1;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:6:"indent";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:2;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:5:"value";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:320;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}}s:96:"\__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7::sectionC5b46eec0542b5dcbedde6e466016efc()";O:35:"phpDocumentor\Reflection\Php\Method":9:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:96:"\__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7::sectionC5b46eec0542b5dcbedde6e466016efc()";s:36:" phpDocumentor\Reflection\Fqsen name";s:39:"sectionC5b46eec0542b5dcbedde6e466016efc";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:7:"private";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:3:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:7:"context";s:43:" phpDocumentor\Reflection\Php\Argument type";O:38:"phpDocumentor\Reflection\Types\Object_":1:{s:45:" phpDocumentor\Reflection\Types\Object_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:17:"\Mustache_Context";s:36:" phpDocumentor\Reflection\Fqsen name";s:16:"Mustache_Context";}}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:1;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:6:"indent";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:2;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:5:"value";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:398;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}}s:96:"\__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7::sectionE7e3bbf6ea802e675a80045c418a5a20()";O:35:"phpDocumentor\Reflection\Php\Method":9:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:96:"\__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7::sectionE7e3bbf6ea802e675a80045c418a5a20()";s:36:" phpDocumentor\Reflection\Fqsen name";s:39:"sectionE7e3bbf6ea802e675a80045c418a5a20";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:7:"private";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:3:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:7:"context";s:43:" phpDocumentor\Reflection\Php\Argument type";O:38:"phpDocumentor\Reflection\Types\Object_":1:{s:45:" phpDocumentor\Reflection\Types\Object_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:17:"\Mustache_Context";s:36:" phpDocumentor\Reflection\Fqsen name";s:16:"Mustache_Context";}}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:1;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:6:"indent";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:2;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:5:"value";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:434;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}}s:96:"\__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7::section8eee11804dcd2f5beefb9520545f9321()";O:35:"phpDocumentor\Reflection\Php\Method":9:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:96:"\__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7::section8eee11804dcd2f5beefb9520545f9321()";s:36:" phpDocumentor\Reflection\Fqsen name";s:39:"section8eee11804dcd2f5beefb9520545f9321";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:7:"private";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:3:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:7:"context";s:43:" phpDocumentor\Reflection\Php\Argument type";O:38:"phpDocumentor\Reflection\Types\Object_":1:{s:45:" phpDocumentor\Reflection\Types\Object_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:17:"\Mustache_Context";s:36:" phpDocumentor\Reflection\Fqsen name";s:16:"Mustache_Context";}}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:1;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:6:"indent";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:2;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:5:"value";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:470;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}}s:96:"\__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7::section90a107d07b7ceda223cc86a30431895b()";O:35:"phpDocumentor\Reflection\Php\Method":9:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:96:"\__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7::section90a107d07b7ceda223cc86a30431895b()";s:36:" phpDocumentor\Reflection\Fqsen name";s:39:"section90a107d07b7ceda223cc86a30431895b";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:7:"private";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:3:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:7:"context";s:43:" phpDocumentor\Reflection\Php\Argument type";O:38:"phpDocumentor\Reflection\Types\Object_":1:{s:45:" phpDocumentor\Reflection\Types\Object_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:17:"\Mustache_Context";s:36:" phpDocumentor\Reflection\Fqsen name";s:16:"Mustache_Context";}}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:1;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:6:"indent";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:2;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:5:"value";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:515;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}}s:96:"\__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7::section55e47f068fec12184963a64973b36dbd()";O:35:"phpDocumentor\Reflection\Php\Method":9:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:96:"\__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7::section55e47f068fec12184963a64973b36dbd()";s:36:" phpDocumentor\Reflection\Fqsen name";s:39:"section55e47f068fec12184963a64973b36dbd";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:7:"private";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:3:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:7:"context";s:43:" phpDocumentor\Reflection\Php\Argument type";O:38:"phpDocumentor\Reflection\Types\Object_":1:{s:45:" phpDocumentor\Reflection\Types\Object_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:17:"\Mustache_Context";s:36:" phpDocumentor\Reflection\Fqsen name";s:16:"Mustache_Context";}}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:1;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:6:"indent";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:2;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:5:"value";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:544;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}}s:96:"\__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7::section9c26da3c71553c80cd5af6f50f07cdbd()";O:35:"phpDocumentor\Reflection\Php\Method":9:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:96:"\__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7::section9c26da3c71553c80cd5af6f50f07cdbd()";s:36:" phpDocumentor\Reflection\Fqsen name";s:39:"section9c26da3c71553c80cd5af6f50f07cdbd";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:7:"private";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:3:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:7:"context";s:43:" phpDocumentor\Reflection\Php\Argument type";O:38:"phpDocumentor\Reflection\Types\Object_":1:{s:45:" phpDocumentor\Reflection\Types\Object_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:17:"\Mustache_Context";s:36:" phpDocumentor\Reflection\Fqsen name";s:16:"Mustache_Context";}}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:1;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:6:"indent";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:2;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:5:"value";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:574;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}}s:96:"\__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7::section58b946eb292fa18b858a52771206644f()";O:35:"phpDocumentor\Reflection\Php\Method":9:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:96:"\__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7::section58b946eb292fa18b858a52771206644f()";s:36:" phpDocumentor\Reflection\Fqsen name";s:39:"section58b946eb292fa18b858a52771206644f";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:7:"private";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:3:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:7:"context";s:43:" phpDocumentor\Reflection\Php\Argument type";O:38:"phpDocumentor\Reflection\Types\Object_":1:{s:45:" phpDocumentor\Reflection\Types\Object_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:17:"\Mustache_Context";s:36:" phpDocumentor\Reflection\Fqsen name";s:16:"Mustache_Context";}}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:1;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:6:"indent";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:2;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:5:"value";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:2093;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}}s:96:"\__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7::sectionF67ca9f1380367445e3d9f8034a44e39()";O:35:"phpDocumentor\Reflection\Php\Method":9:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";N;s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:96:"\__localhost_LASAGNA_7eadbc146bbf1e6b58130840b224f9c7::sectionF67ca9f1380367445e3d9f8034a44e39()";s:36:" phpDocumentor\Reflection\Fqsen name";s:39:"sectionF67ca9f1380367445e3d9f8034a44e39";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:7:"private";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:3:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:7:"context";s:43:" phpDocumentor\Reflection\Php\Argument type";O:38:"phpDocumentor\Reflection\Types\Object_":1:{s:45:" phpDocumentor\Reflection\Types\Object_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:17:"\Mustache_Context";s:36:" phpDocumentor\Reflection\Fqsen name";s:16:"Mustache_Context";}}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:1;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:6:"indent";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}i:2;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:5:"value";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";N;s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:2124;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}}}s:47:" phpDocumentor\Reflection\Php\Class_ usedTraits";a:0:{}s:45:" phpDocumentor\Reflection\Php\Class_ location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:3;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}}}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}}";