1658801417
AwuilbDvXz%3Ab166aac8e6af4d83dc8922b2c2c611b2-ba02d9e805274383be9df6d88ded29c6
s:36616:"O:33:"phpDocumentor\Reflection\Php\File":12:{s:43:" phpDocumentor\Reflection\Php\File docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:13:"GSC Tesseract";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:3:{i:0;O:46:"phpDocumentor\Reflection\DocBlock\Tags\Generic":2:{s:7:" * name";s:8:"category";s:14:" * description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:9:"Framework";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}}i:1;O:45:"phpDocumentor\Reflection\DocBlock\Tags\Author":4:{s:7:" * name";s:6:"author";s:57:" phpDocumentor\Reflection\DocBlock\Tags\Author authorName";s:12:"Fred Brooker";s:58:" phpDocumentor\Reflection\DocBlock\Tags\Author authorEmail";s:18:"oscadal@gscloud.cz";s:14:" * description";N;}i:2;O:46:"phpDocumentor\Reflection\DocBlock\Tags\Generic":2:{s:7:" * name";s:7:"license";s:14:" * description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:30:"MIT https://gscloud.cz/LICENSE";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}}}s:42:" phpDocumentor\Reflection\DocBlock context";O:38:"phpDocumentor\Reflection\Types\Context":2:{s:49:" phpDocumentor\Reflection\Types\Context namespace";s:0:"";s:56:" phpDocumentor\Reflection\Types\Context namespaceAliases";a:0:{}}s:43:" phpDocumentor\Reflection\DocBlock location";N;s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:39:" phpDocumentor\Reflection\Php\File hash";s:32:"ba02d9e805274383be9df6d88ded29c6";s:39:" phpDocumentor\Reflection\Php\File name";s:17:"CorePresenter.php";s:39:" phpDocumentor\Reflection\Php\File path";s:21:"app/CorePresenter.php";s:41:" phpDocumentor\Reflection\Php\File source";s:17304:"<?php
/**
 * GSC Tesseract
 *
 * @category Framework
 * @author   Fred Brooker <oscadal@gscloud.cz>
 * @license  MIT https://gscloud.cz/LICENSE
 */

namespace GSC;

use chillerlan\QRCode\QRCode;
use chillerlan\QRCode\QROptions;

/**
 * Core Presenter
 */
class CorePresenter extends APresenter
{
    /**
     * Main controller
     *
     * @return void
     */
    public function process()
    {
        $data = $this->getData();
        $match = $this->getMatch();
        $presenter = $this->getPresenter();
        $view = $this->getView();

        $extras = [
            "fn" => $view,
            "ip" => $this->getIP(),
            "name" => "Tesseract LASAGNA Core Module",
        ];

        // API calls
        switch ($view) {
            case "PingBack":
                $this->checkRateLimit();
                $x = file_get_contents("/proc/meminfo") ?? "";
                $meminfo = explode("\n", $x);
                $meminfo = array_map("trim", $meminfo);
                $meminfo = array_filter($meminfo, "strlen");
                foreach ($meminfo as $k => $v) {
                    if (!strpos($v, ':')) {
                        continue;
                    }
                    $x = explode(':', $v);
                    unset($meminfo[$k]);
                    $meminfo[$x[0]] = trim($x[1]);
                }
                $data = [
                    "system_load" => function_exists("sys_getloadavg") ? \sys_getloadavg() : null,
                    "memory_info" => $meminfo ?? null,
                ];
                return $this->writeJsonData($data, $extras);
                break;

            case "GetWebManifest":
                // do NOT rate limit this call!
                //$this->checkRateLimit();
                $this->setHeaderJson();
                $lang = $this->validateLanguage($_GET["lang"] ?? "en"); // language set by GET parameter
                return $this->setData("output", $this->setData("l", $this->getLocale($lang))->renderHTML("manifest"));
                break;

            case "ReadEpubBook1":
            case "ReadEpubBook2":
                $this->checkRateLimit();
                $epub = null;
                if (isset($match["params"]["trailing"])) {
                    $epub = \urldecode(\trim($match["params"]["trailing"]));
                    // tweaks
                    $epub = \str_replace("..", "", $epub);
                    $epub = \str_replace("\\", "", $epub);
                    $epub = \str_ireplace(".epub", "", $epub);
                    $file = WWW . "/${epub}.epub";
                }
                if ($epub && \file_exists($file) && \is_readable($file)) {
                    $this->setHeaderHTML();
                    $data["epub"] = "/${epub}.epub";
                    $output = $this->setData($data)->renderHTML($presenter[$view]["template"]);
                    return $this->setData("output", $output);
                }
                return $this->writeJsonData(400, $extras);
                break;

            case "GetTXTSitemap":
                // do NOT rate limit this call!
                //$this->checkRateLimit();
                $this->setHeaderText();
                $map = [];
                foreach ($presenter as $p) {
                    if (isset($p["sitemap"]) && $p["sitemap"]) {
                        $map[] = \trim($p["path"], "/ \t\n\r\0\x0B");
                    }
                }
                return $this->setData("output", $this->setData("sitemap", $map)->renderHTML("sitemap.txt"));
                break;

            case "GetXMLSitemap":
                // do NOT rate limit this call!
                //$this->checkRateLimit();
                $this->setHeaderXML();
                $map = [];
                foreach ($presenter as $p) {
                    if (isset($p["sitemap"]) && $p["sitemap"]) {
                        $map[] = \trim($p["path"], "/ \t\n\r\0\x0B");
                    }
                }
                return $this->setData("output", $this->setData("sitemap", $map)->renderHTML("sitemap.xml"));
                break;

            case "GetRSSXML":
                // do NOT rate limit this call!
                //$this->checkRateLimit();
                $this->setHeaderXML();
                $language = "en"; // set to English
                $l = $this->getLocale($language);
                if (class_exists("\\GSC\\RSSPresenter")) {
                    $map = RSSPresenter::getInstance()->process() ?? []; // get items map from RSSPresenter
                } else {
                    $map = [];
                }
                $this->setData("rss_channel_description", $l["meta_description"] ?? "");
                $this->setData("rss_channel_link", $l['$canonical_url'] ?? "");
                $this->setData("rss_channel_title", $l["title"] ?? "");
                return $this->setData("output", $this->setData("rss_items", (array) $map)->renderHTML("rss.xml"));
                break;

            case "GetArticleHTMLExport":
                // special rate limit value!
                $this->checkRateLimit(100);
                $nofetch = $_COOKIE["NOFETCH"] ?? false; // extra check
                $x = 0;
                if (isset($match["params"]["lang"])) {
                    $language = strtolower(substr(trim($match["params"]["lang"]), 0, 2));
                    $x++;
                }
                if (isset($match["params"]["profile"])) {
                    $profile = trim($match["params"]["profile"]);
                    $x++;
                }
                if (isset($match["params"]["trailing"])) {
                    $path = trim($match["params"]["trailing"]);
                    $x++;
                }
                if ($x !== 3) {
                    return $this->setHeaderHTML()->setData("output", ""); // ERROR
                }
                if ($path == "!") { // homepage
                    $path = $language;
                } else {
                    $path = $language . "/" . $path;
                }
                $html = "";
                $hash = \hash("sha256", $path);
                $f = DATA . "/summernote_${profile}_${hash}.json";
                if (\file_exists($f)) {
                    $html = \json_decode(@\file_get_contents($f), true);
                    if (\is_array($html)) {
                        $html = \join("\n", $html);
                    }
                } else { // ERROR - file not found!
                    return ErrorPresenter::getInstance()->process(404);
                }
                \preg_match_all('/\[remote_content url="([^]\"\n]*)"\]/', $html, $matches);
                $c = 0;
                $codes = [];
                $remotes = [];
                foreach ($matches[0]??=[] as $match) {
                    if ($match) {
                        $codes[$c] = $match;
                    }
                    $c++;
                }
                $c = 0;
                foreach ($matches[1]??=[] as $match) {
                    if ($match && strpos($codes[$c], $match)) {
                        $remotes[$c] = $match;
                    }
                    $c++;
                }
                $cache = []; // in-RAM cache
                foreach ($remotes as $key => $uri) {
                    if ($nofetch) {
                        $out = "";
                    } else {
                        if (isset($cache[$uri])) {
                            $out = $cache[$uri];
                        } else {
                            $ch = \curl_init();
                            \curl_setopt_array($ch, array(
                                CURLOPT_URL => $uri,
                                CURLOPT_CONNECTTIMEOUT => 5,
                                CURLOPT_COOKIE => "NOFETCH=true",
                                CURLOPT_RETURNTRANSFER => true,
                                CURLOPT_TIMEOUT => 10,
                            ));
                            $out = \curl_exec($ch);
                            // find <body> content if possible
                            \preg_match("/<body.*\/body>/s", $out, $m);
                            if (count($m) != 0) {
                                $out = "{$m[0]}";
                            }
                            $cache[$uri] = $out;
                            \curl_close($ch);
                        }
                    }
                    $html = \str_replace($codes[$key], $out, $html);
                }
                $html = \preg_replace('#<script(.*?)>(.*?)</script>#is', '', $html); // remove script tags
                $html = \preg_replace('/<!--(.*)-->/Uis', '', $html); // remove HTML comments
                return $this->setHeaderHTML()->setData("output", $html);
                break;

            case "GetQR":
                $this->checkRateLimit();
                $x = 0;
                if (isset($match["params"]["size"])) {
                    $size = \trim($match["params"]["size"]);
                    switch ($size) {
                        case "m":
                            $scale = 8;
                            break;
                        case "l":
                            $scale = 10;
                            break;
                        case "x":
                            $scale = 15;
                            break;
                        case "s":
                        default:
                            $scale = 5;
                    }
                    $x++;
                }
                if (isset($match["params"]["trailing"])) {
                    $text = \trim($match["params"]["trailing"]);
                    $x++;
                }
                if ($x !== 2) { // ERROR
                    return $this->writeJsonData(400, $extras);
                }
                $options = new QROptions([
                    "version" => 7,
                    "outputType" => QRCode::OUTPUT_IMAGE_PNG,
                    "eccLevel" => QRCode::ECC_L,
                    "scale" => $scale,
                    "imageBase64" => false,
                    "imageTransparent" => false,
                ]);
                \header("Content-type: image/png");
                echo (new QRCode($options))->render($text ?? "", CACHE . "/" . hash("sha256", $text) . ".png");
                exit; // finish here - just not to mangle the PNG!
                break;

            case "GetServiceWorker":
                // do NOT rate limit this call!
                $this->setHeaderJavaScript();
                $map = [];
                foreach ($presenter as $p) {
                    if (isset($p["sitemap"]) && $p["sitemap"]) {
                        $map[] = \trim($p["path"], "/ \t\n\r\0\x0B");
                    }
                }
                return $this->setData("output", $this->setData("sitemap", $map)->renderHTML("sw.js"));
                break;

            case "API":
                $this->checkRateLimit();
                $this->setHeaderHTML();
                $map = [];
                foreach ($presenter as $p) {
                    if (isset($p["api"]) && $p["api"]) {
                        $info = $p["api_info"] ?? "";
                        StringFilters::convert_eol_to_br($info);
                        $info = \htmlspecialchars($info);
                        $info = \preg_replace(
                            array('#href=&quot;(.*)&quot;#', '#&lt;(/?(?:pre|a|b|br|em|u|ul|li|ol)(\shref=".*")?/?)&gt;#'),
                            array('href="\1"', '<\1>'),
                            $info
                        );
                        $map[] = [
                            "count" => \count($p["api_example"]),
                            "deprecated" => $p["deprecated"] ?? false,
                            "desc" => \htmlspecialchars($p["api_description"] ?? ""),
                            "exam" => $p["api_example"] ?? [],
                            "finished" => $p["finished"] ?? false,
                            "info" => $info ? "<br><blockquote>${info}</blockquote>" : "",
                            "key" => $p["use_key"] ?? false,
                            "linkit" => !(\strpos($p["path"], "[") ?? false), // do not link to path with parameters!
                            "method" => \strtoupper($p["method"]),
                            "path" => \trim($p["path"], "/ \t\n\r\0\x0B"),
                            "private" => $p["private"] ?? false,
                        ];
                    }
                }
                \usort($map, function ($a, $b) {
                    return \strcmp($a["desc"], $b["desc"]);
                });
                return $this->setData("output", $this->setData("apis", $map)->setData("l", $this->getLocale("en"))->renderHTML("apis"));
                break;

            case "GetAndroidJs":
                $this->checkRateLimit();
                $f = WWW . "/js/android-app.js";
                if (\file_exists($f)) {
                    $content = @\file_get_contents($f);
                    $time = \filemtime($f) ?? null;
                    $version = \hash("sha256", $content);
                } else {
                    $content = null;
                    $version = null;
                    $time = null;
                }
                return $this->writeJsonData([
                    "js" => $content,
                    "timestamp" => $time,
                    "version" => $version,
                ], $extras);
                break;

            case "GetAndroidCss":
                $this->checkRateLimit();
                $f = WWW . "/css/android.css";
                if (\file_exists($f)) {
                    $content = @\file_get_contents($f);
                    $time = \filemtime($f) ?? null;
                    $version = \hash("sha256", $content);
                } else {
                    $content = null;
                    $version = null;
                    $time = null;
                }
                return $this->writeJsonData([
                    "css" => $content,
                    "timestamp" => $time,
                    "version" => $version,
                ], $extras);
                break;

            case "GetCoreVersion":
                $this->checkRateLimit();
                $d = [];
                $d["LASAGNA"]["core"]["date"] = (string) $data["VERSION_DATE"];
                $d["LASAGNA"]["core"]["revisions"] = (int) $data["REVISIONS"];
                $d["LASAGNA"]["core"]["timestamp"] = (int) $data["VERSION_TIMESTAMP"];
                $d["LASAGNA"]["core"]["version"] = (string) $data["VERSION"];
                return $this->writeJsonData($d, $extras);
                break;

            case "ReadArticles":
                $this->checkRateLimit();
                $x = 0;
                if (isset($match["params"]["profile"])) {
                    $profile = trim($match["params"]["profile"]);
                    $x++;
                }
                if (isset($match["params"]["hash"])) {
                    $hash = trim($match["params"]["hash"]);
                    $x++;
                }
                if ($x !== 2) { // ERROR
                    return $this->writeJsonData(400, $extras);
                }
                $f = DATA . "/summernote_${profile}_${hash}.json";
                $data = "";
                $time = null;
                if (\file_exists($f)) {
                    $data = @\file_get_contents($f);
                    $time = \filemtime($f);
                }
                $crc = hash("sha256", $data);
                if (isset($_GET["crc"])) {
                    if ($_GET["crc"] == $crc) { // NOT MODIFIED
                        return $this->writeJsonData(304, $extras);
                    }
                }
                return $this->writeJsonData([
                    "crc" => $crc,
                    "hash" => $hash,
                    "html" => $data,
                    "profile" => $profile,
                    "timestamp" => $time,
                ], $extras);
                break;
        }

        // get language and locale
        $language = \strtolower($presenter[$view]["language"]) ?? "cs";
        $locale = $this->getLocale($language);
        $hash = \hash("sha256", (string) \json_encode($locale));

        switch ($view) {
            case "GetCsDataVersion":
            case "GetEnDataVersion":
                $d = [];
                $d["LASAGNA"]["data"]["language"] = $language;
                $d["LASAGNA"]["data"]["version"] = $hash;
                return $this->writeJsonData($d, $extras);
                break;

            default:
                ErrorPresenter::getInstance()->process(404);
        }
        return $this;
    }

    /**
     * Validate system language
     *
     * @param string $lang language 2-char code
     * @return string correct language code
     */
    private function validateLanguage($lang = "en")
    {
        $lang = \substr(\strtolower((string) $lang), 0, 2);
        if (!\in_array($lang, [
            "cs",
            //"de",
            "en",
            "sk",
        ])) {
            $lang = "en";
        }
        return $lang;
    }
}
";s:45:" phpDocumentor\Reflection\Php\File namespaces";a:1:{s:4:"\GSC";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:4:"\GSC";s:36:" phpDocumentor\Reflection\Fqsen name";s:3:"GSC";}}s:43:" phpDocumentor\Reflection\Php\File includes";a:0:{}s:44:" phpDocumentor\Reflection\Php\File functions";a:0:{}s:44:" phpDocumentor\Reflection\Php\File constants";a:0:{}s:42:" phpDocumentor\Reflection\Php\File classes";a:1:{s:18:"\GSC\CorePresenter";O:35:"phpDocumentor\Reflection\Php\Class_":11:{s:42:" phpDocumentor\Reflection\Php\Class_ fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:18:"\GSC\CorePresenter";s:36:" phpDocumentor\Reflection\Fqsen name";s:13:"CorePresenter";}s:45:" phpDocumentor\Reflection\Php\Class_ docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:14:"Core Presenter";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:0:{}s:42:" phpDocumentor\Reflection\DocBlock context";O:38:"phpDocumentor\Reflection\Types\Context":2:{s:49:" phpDocumentor\Reflection\Types\Context namespace";s:3:"GSC";s:56:" phpDocumentor\Reflection\Types\Context namespaceAliases";a:2:{s:6:"QRCode";s:24:"chillerlan\QRCode\QRCode";s:9:"QROptions";s:27:"chillerlan\QRCode\QROptions";}}s:43:" phpDocumentor\Reflection\DocBlock location";N;s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:45:" phpDocumentor\Reflection\Php\Class_ abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Class_ final";b:0;s:43:" phpDocumentor\Reflection\Php\Class_ parent";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:15:"\GSC\APresenter";s:36:" phpDocumentor\Reflection\Fqsen name";s:10:"APresenter";}s:47:" phpDocumentor\Reflection\Php\Class_ implements";a:0:{}s:46:" phpDocumentor\Reflection\Php\Class_ constants";a:0:{}s:47:" phpDocumentor\Reflection\Php\Class_ properties";a:0:{}s:44:" phpDocumentor\Reflection\Php\Class_ methods";a:2:{s:29:"\GSC\CorePresenter::process()";O:35:"phpDocumentor\Reflection\Php\Method":9:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:15:"Main controller";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:1:{i:0;O:46:"phpDocumentor\Reflection\DocBlock\Tags\Return_":3:{s:7:" * type";O:36:"phpDocumentor\Reflection\Types\Void_":0:{}s:7:" * name";s:6:"return";s:14:" * description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}}}s:42:" phpDocumentor\Reflection\DocBlock context";r:51;s:43:" phpDocumentor\Reflection\DocBlock location";N;s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:29:"\GSC\CorePresenter::process()";s:36:" phpDocumentor\Reflection\Fqsen name";s:7:"process";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:6:"public";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:0:{}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:25;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}}s:38:"\GSC\CorePresenter::validateLanguage()";O:35:"phpDocumentor\Reflection\Php\Method":9:{s:45:" phpDocumentor\Reflection\Php\Method docBlock";O:33:"phpDocumentor\Reflection\DocBlock":7:{s:42:" phpDocumentor\Reflection\DocBlock summary";s:24:"Validate system language";s:46:" phpDocumentor\Reflection\DocBlock description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:0:"";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}s:39:" phpDocumentor\Reflection\DocBlock tags";a:2:{i:0;O:44:"phpDocumentor\Reflection\DocBlock\Tags\Param":6:{s:58:" phpDocumentor\Reflection\DocBlock\Tags\Param variableName";s:4:"lang";s:56:" phpDocumentor\Reflection\DocBlock\Tags\Param isVariadic";b:0;s:57:" phpDocumentor\Reflection\DocBlock\Tags\Param isReference";b:0;s:7:" * type";O:38:"phpDocumentor\Reflection\Types\String_":0:{}s:7:" * name";s:5:"param";s:14:" * description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:20:"language 2-char code";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}}i:1;O:46:"phpDocumentor\Reflection\DocBlock\Tags\Return_":3:{s:7:" * type";O:38:"phpDocumentor\Reflection\Types\String_":0:{}s:7:" * name";s:6:"return";s:14:" * description";O:45:"phpDocumentor\Reflection\DocBlock\Description":2:{s:59:" phpDocumentor\Reflection\DocBlock\Description bodyTemplate";s:21:"correct language code";s:51:" phpDocumentor\Reflection\DocBlock\Description tags";a:0:{}}}}s:42:" phpDocumentor\Reflection\DocBlock context";r:51;s:43:" phpDocumentor\Reflection\DocBlock location";N;s:50:" phpDocumentor\Reflection\DocBlock isTemplateStart";b:0;s:48:" phpDocumentor\Reflection\DocBlock isTemplateEnd";b:0;}s:42:" phpDocumentor\Reflection\Php\Method fqsen";O:30:"phpDocumentor\Reflection\Fqsen":2:{s:37:" phpDocumentor\Reflection\Fqsen fqsen";s:38:"\GSC\CorePresenter::validateLanguage()";s:36:" phpDocumentor\Reflection\Fqsen name";s:16:"validateLanguage";}s:45:" phpDocumentor\Reflection\Php\Method abstract";b:0;s:42:" phpDocumentor\Reflection\Php\Method final";b:0;s:43:" phpDocumentor\Reflection\Php\Method static";b:0;s:47:" phpDocumentor\Reflection\Php\Method visibility";O:39:"phpDocumentor\Reflection\Php\Visibility":1:{s:51:" phpDocumentor\Reflection\Php\Visibility visibility";s:7:"private";}s:46:" phpDocumentor\Reflection\Php\Method arguments";a:1:{i:0;O:37:"phpDocumentor\Reflection\Php\Argument":5:{s:43:" phpDocumentor\Reflection\Php\Argument name";s:4:"lang";s:43:" phpDocumentor\Reflection\Php\Argument type";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}s:46:" phpDocumentor\Reflection\Php\Argument default";s:4:""en"";s:50:" phpDocumentor\Reflection\Php\Argument byReference";b:0;s:49:" phpDocumentor\Reflection\Php\Argument isVariadic";b:0;}}s:45:" phpDocumentor\Reflection\Php\Method location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:418;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}s:47:" phpDocumentor\Reflection\Php\Method returnType";O:37:"phpDocumentor\Reflection\Types\Mixed_":0:{}}}s:47:" phpDocumentor\Reflection\Php\Class_ usedTraits";a:0:{}s:45:" phpDocumentor\Reflection\Php\Class_ location";O:33:"phpDocumentor\Reflection\Location":2:{s:45:" phpDocumentor\Reflection\Location lineNumber";i:18;s:47:" phpDocumentor\Reflection\Location columnNumber";i:0;}}}s:45:" phpDocumentor\Reflection\Php\File interfaces";a:0:{}s:41:" phpDocumentor\Reflection\Php\File traits";a:0:{}}";