(function (w, d, undefined) {

  // check logout cookie
  if (getCookie("logout")) {
    d.getElementById("admin_main").style.display = "none";
    setCookie("motyle", "true");
  }
  delCookie("logout");

  // GSC.init
  if (w.GSC.init) {
    w.GSC.data = {};

    // fn PingDot()
    if (!w.GSC.PingDot) w.GSC.PingDot = function (el, status = true) {
      if (!el) return;
      if (status) {
        status = "green";
      } else {
        status = "red";
      }
      $(el).html("&#8226;").css({
        color: status,
        opacity: 1
      }).fadeTo("slow", 0);
    }

    // fn GetCsvInfo()
    if (!w.GSC.GetCsvInfo) w.GSC.GetCsvInfo = function () {
      if (w.GSC.offline) {
        return GSC.PingDot("#csv_ping", false);
      }

      // API: GetCsvInfo
      $.get("/admin/GetCsvInfo?" + Date.now(), function (data) {
          GSC.PingDot("#csv_ping");
          var content = "";
          var now = ~~(Date.now() / 1000);
          moment.locale("{{ lang }}");
          for (x in data.data) {
            var link = x;
            var csv = data.data[x]["csv"];
            var lines = data.data[x]["lines"];
            var sheet = data.data[x]["sheet"];
            if (!data.data[x]["sheet"]) continue;
            if (sheet) {
              link =
                '<a rel=noopener target=_blank title="{{ l.a_edit_gsheet_ttip }}" style="font-size:1.5rem;border-radius:2px" ' +
                'class="orange mono white-text bold" href="' +
                'https://docs.google.com/spreadsheets/d/' +
                sheet + '/edit#gid=0">&nbsp;<i class="material-icons white-text tiny">edit</i>&#8239;' +
                x + '&nbsp;</a>&nbsp;&nbsp;&nbsp;<a rel=noopener target=_blank title="{{ l.a_download_csv_ttip }}"' +
                ' style="font-size:1.5rem;border-radius:2px" class="bold blue white-text mono" ' +
                'href="https://docs.google.com/spreadsheets/d/e/' +
                csv + '/pub?gid=0&single=true&output=csv">&nbsp;<i class="fas white-text fa-cloud-download-alt"></i>&#8239;' +
                lines + '&nbsp;</a>&nbsp;';
            }
            content += (link + " {{ l.a_age }}&nbsp;" +
              moment.duration(Math.abs(~~((now - data.data[x]["timestamp"]))), "seconds").humanize() + "<br>"
            );
          }
          $("#a_update_info").html(content);
        })
        .fail(function (e) {
          if (e.status == 401) location.reload(); // reload when HTTP 401 - Unauthorized
          if (e.status == 403) location.reload(); // reload when HTTP 403 - Forbidden
          GSC.PingDot("#csv_ping", false);
          $("#a_update_info").addClass("bigemoji").html("ERROR ü§Ø");
        });
    }

    // fn AdminUI
    if (!w.GSC.AdminUI) w.GSC.AdminUI = function () {
      $("#admin_main div").addClass("a_reset");
      $("#admin_main h2").addClass("a_reset a_h2");
      $("#admin_main h4").addClass("a_reset a_h4");
      $("#admin_main h5").addClass("a_reset a_h5");
      $("#admin_main p").addClass("a_reset");

      // remove tooltips for touch display
      if (w.GSC.touch) {
        if ($(".tooltipped")) $(".tooltipped").tooltip("destroy");
      }

      // show news
      $(".open_news").unbind();
      $(".open_news").click(function () {
        $(this).hide();
        $(".close_news").removeClass('hide').show();
        $("#news").removeClass('hide').hide().show(200);
      });

      // hide news
      $(".close_news").unbind();
      $(".close_news").click(function () {
        $(this).hide();
        $(".open_news").removeClass('hide').show();
        $("#news").hide(200);
      });

      // show news ‚ùóÔ∏è if sha256 is different
      sha256($("#newscontent").html()).then(
        hash => {
          if (hash != localStorage.getItem("newshash")) {
            localStorage.setItem("newshash", hash);
            $("#newsdot").removeClass("hide");
            $(".open_news").click();
        }
      });

      // show translation pins
      $(".trans_pin").click(function () {
        if ($(this).data('on') == '1') {
            {{#langcs}}
            M.toast({text: 'üìå VYPNUTO'});
            {{/langcs}}
            {{#langen}}
            M.toast({text: 'üìå OFF'});
            {{/langen}}
            $(this).data('on', 0);    
            $('.sheetpin').remove();
          } else {
            {{#langcs}}
            M.toast({text: 'üìå ZAPNUTO'});
            {{/langcs}}
            {{#langen}}
            M.toast({text: 'üìå ON'});
            {{/langen}}
          $(this).data('on', 1);
          $('*[data-admin-tooltip]').each(function() {
            $(this).prepend('<b data-copy="' + $(this).data('admin-tooltip') + '" onclick="GSC.CopyThisText(this);" title="' + $(this).data('admin-tooltip') + '" class="hover sheetpin">üìå&nbsp;</b>')
          });
        }
      });
    
      // editor block
      $(".summernote").unbind();
      $(".summernote").click(function () {
        $(".summernote").unbind("dblclick");
        GSC.DeploySummernote();
      });

      // add article
      $("#a_article").click(function () {
        var name = prompt('{{ l.a_article_add_prompt }}:').trim();
        name = name.replace(/['"/\\]/g, '');
        if (name.length && name != '!') {
          location.pathname = '{{ lang }}/id/' + name;
        }
      });

      // API: GetArticlesInfo
      $.get("/admin/GetArticlesInfo?" + Date.now(), function (data) {
        if (data && data.data) {
          $('#ArticleURLSelect').html('<option value="" disabled selected>&hellip;</option>');
          for (var i in data.data) {
            $('#ArticleURLSelect').append("<option value='" + data.data[i] + "'>" + data.data[i] + "</option>");
          }
          // populate form data
          $('#ArticleURLSelect').formSelect();
        }
      });
    }

    // fn DeploySummernote()
    if (!w.GSC.DeploySummernote) w.GSC.DeploySummernote = function () {
      GSC.summernote_on = true;
      $("#a_summernote").attr("disabled", "disabled");
      $("#a_summernote").text("{{ l.a_save_all }}");
      $("#a_summernote").unbind("click");

      // Summernote: SAVE ALL
      $("#a_summernote").unbind();
      $("#a_summernote").click(function () {
        if (GSC.offline) {
          M.toast({text: "offline üì∂"});
          return;
        }
        $("#a_summernote").attr("disabled", "disabled");
        var id;
        var data = {};
        $(".summernote").each(function (i, obj) {
          // collect HTML data
          id = $(obj).attr("id");
          if (id) {
            data[id] = $(obj).summernote("code");
          }
        });

        // API: UpdateArticles (POST - save all articles data)
        $.post("/admin/UpdateArticles", {
          hash: "{{ request_path_hash }}",
          path: window.location.pathname,
          data: JSON.stringify(data)
        }, function (data) {
          M.toast({text: "üíæ {{ l.a_saved_ok }}"});
        }).done(function () {
          $("#a_summernote").removeAttr("disabled");
          GSC.AdminUI();
        }).fail(function (xhr, status, error) {
          // error message
          alert(error);
          $("#a_summernote").removeAttr("disabled");
          M.toast({text: "{{ l.a_error_general }}"});
        });
      });

      // SaveAllButton() button
      var SaveAllButton = function (context) {
        var ui = $.summernote.ui;
        var button = ui.button({
          className: "note-btn-bold blue",
          contents: '<span title="üíæ {{ l.a_summer_save_ttip }}"><i class="fas fa-save"></i>&nbsp;<b>{{ l.a_summer_save }}</b></span>',
          codeviewKeepButton: false,
          click: function (e) {
            $("#a_summernote").click();
          }
        });
        return button.render();
      }

      // DestroyButton() button
      var DestroyButton = function (context) {
        var ui = $.summernote.ui;
        var button = ui.button({
          className: "note-btn-bold",
          contents: '<span title="{{ l.a_summer_close_ttip }}"><i class="fas fa-window-close"></i>&nbsp;<b>{{ l.a_summer_close }}</b></span>',
          codeviewKeepButton: true,
          click: function (e) {
            $(".summernote").each(function (i, obj) {
              $(obj).summernote("destroy");
              GSC.AdminUI();
              $("#a_summernote").html('<i class="fas fa-edit"></i>{{ l.a_summernote }}');
              $("#a_summernote").unbind("click");
              $("#a_summernote").click(function () {
                GSC.ReadArticles(function () {
                  GSC.DeploySummernote();
                });
              });
              GSC.summernote_on = false;
            });
          }
        });
        return button.render();
      }

      // HistorySelector() listbox
      var HistorySelector = function (context) {
        var ui = $.summernote.ui;
        var list = ui.buttonGroup([
          ui.button({
            className: "dropdown-toggle",
            contents: '<span title="{{ l.a_summer_history_ttip }}" class="fas fa-history"></span> <span class="caret"></span>',
            data: {
              toggle: "dropdown"
            }
          }),
          ui.dropdown({
            className: "dropdown-style",
            contents: "<ul></ul>",
            callback: function ($dropdown) {
              $dropdown.find("li").each(function () {
                $(this).click(function () {
                  context.invoke("editor.insertText", $(this).html());
                });
              });
            }
          })
        ]);
        return list.render();
      }

      // Emoji1Selector() listbox
      var Emoji1Selector = function (context) {
        var list = "";
        var emoji = "¬©,¬Æ,‚ìÇ,‚Ñ¢,‚ë†,‚ë°,‚ë¢,‚ë£,‚ë§,‚ë•,‚ë¶,‚ëß,‚ë®,‚ë©,¬¢,¬£,¬•,¬ß,¬¨,¬±,¬∞,¬≤,¬∂,¬´,¬ª,√ó,‚Äò,‚Äô,‚Äú,‚Äù,‚Ä†,‚Ä°,‚Ä¢,‚Ä£,‚Ä¶,‚Ä≤,‚Ä≥,‚Äπ,‚Ä∫,‚Åâ,‚Äº,‚Ç¨,‚Ñì,‚Ñµ,‚Ñπ,œÄ,‚Äç,‚åò,‚Üê,‚Üë,‚Üí,‚Üì,‚Üî,‚Üï,‚Üñ,‚Üó,‚Üò,‚Üô,‚Ü©,‚Ü™,‚Ü∂,‚Ü∑,‚Ü∫,‚Üª,‚áÑ,‚áí,‚áû,‚áü,‚á§,‚á•,‚àÄ,‚àÇ,‚àÉ,‚àÖ,‚àà,‚àâ,‚àé,‚àë,‚àö,‚àû,‚à°,‚àß,‚à®,‚à´,‚âà,‚âî,‚â†,‚â°,‚â§,‚â•,‚äÇ,‚äÉ,‚äÑ,‚äÜ,‚äá,‚äï,‚äó,‚äô,‚ãÇ,‚ãÉ,‚åà,‚åâ,‚åä,‚åã,‚ñ†,‚ñ™,‚ñ´,‚ñ≤,‚ñ≥,‚ñ∂,‚ñ∑,‚ñº,‚ñΩ,‚óÄ,‚óÅ,‚óÜ,‚óè,‚óª,‚óº,‚óΩ,‚óæ,‚å¶,‚å®,‚å´,‚éà,‚èé,‚úè,‚úí,‚úì,‚úî,‚úñ,‚úö,‚úù,‚ú°,‚ú≥,‚ú¥,‚ùÑ,‚ùá,‚ù£,‚ù¶,‚¨Ü,‚¨á,‚òÄ,‚òÅ,‚òÇ,‚òÉ,‚òÑ,‚òÖ,‚òÜ,‚òá,‚òà,‚òé,‚òë,‚òò,‚òô,‚ò†,‚ò¢,‚ò£,‚ò¶,‚ò™,‚ò≠,‚òÆ,‚òØ,‚ò∏,‚òπ,‚òº,‚òæ,‚ôÄ,‚ôÇ,‚ô†,‚ô£,‚ô•,‚ô¶,‚ôû,‚ôü,‚ôò,‚ô®,‚ô©,‚ô™,‚ô´,‚ô¨,‚ô≤,‚ôª,‚ôæ,‚öí,‚öì,‚öî,‚öï,‚öñ,‚öó,‚öô,‚öõ,‚öú,‚ö†,‚úÇ,‚úà,‚úâ,‚ôà,‚ôâ,‚ôä,‚ôã,‚ôå,‚ôç,‚ôé,‚ôè,‚ôê,‚ôë,‚ôí,‚ôì";
        var emojis = emoji.split(",");
        for (i = 0; i < emojis.length; i++) {
          list += "<i>" + emojis[i] + "</i>\n";
        }
        var ui = $.summernote.ui;
        var list = ui.buttonGroup([
          ui.button({
            className: "dropdown-toggle",
            contents: '<span title="{{ l.a_summer_emoji1_ttip }}">¬©</span> <span class="caret"></span>',
            data: {
              toggle: "dropdown"
            }
          }),
          ui.dropdown({
            className: "dropdown-style emoji-list",
            contents: list,
            callback: function ($dropdown) {
              $dropdown.find("i").each(function () {
                $(this).click(function () {
                  context.invoke("editor.restoreRange");
                  context.invoke("editor.focus");
                  context.invoke("editor.insertText", $(this).html());
                  GSC.CopyClipboard($(this).html());
                });
              });
            }
          })
        ]);
        return list.render();
      }

      // Emoji2Selector() listbox
      var Emoji2Selector = function (context) {
        var list = "";
        var emoji = "üòÄ,üòÉ,üòÑ,üòÅ,üòÜ,üòÖ,ü§£,üòÇ,üôÇ,üôÉ,üòâ,üòä,üòá,ü•∞,üòç,ü§©,üòò,üòó,üòö,üòô,üòã,üòõ,üòú,ü§™,üòù,ü§ë,ü§ó,ü§≠,ü§´,ü§î,ü§ê,ü§®,üòê,üòë,üò∂,üòè,üòí,üôÑ,üò¨,ü§•,üòå,üòî,üò™,ü§§,üò¥,üò∑,ü§í,ü§ï,ü§¢,ü§Æ,ü§ß,ü•µ,ü•∂,ü•¥,üòµ,ü§Ø,ü§†,ü•≥,üòé,ü§ì,üßê,üòï,üòü,üôÅ,üòÆ,üòØ,üò≤,üò≥,ü•∫,üò¶,üòß,üò®,üò∞,üò•,üò¢,üò≠,üò±,üòñ,üò£,üòû,üòì,üò©,üò´,üò§,üò°,üò†,ü§¨,üòà,üëø,üíÄ,üí©,ü§°,üëπ,üë∫,üëª,üëΩ,üëæ,ü§ñ,üò∫,üò∏,üòπ,üòª,üòº,üòΩ,üôÄ,üòø,üòæ,üíã,üëã,ü§ö,üñêÔ∏è,‚úã,üññ,üëå,ü§û,ü§ü,ü§ò,ü§ô,üëà,üëâ,üëÜ,üñï,üëá,üëç,üëé,‚úä,üëä,ü§õ,ü§ú,üëè,üôå,üëê,ü§≤,ü§ù,üôè,üíÖ,ü§≥,üí™,ü¶µ,ü¶∂,üëÇ,üëÉ,üß†,ü¶∑,ü¶¥,üëÄ,üëÅÔ∏è,üëÖ,üëÑ,üë∂,üßí,üë¶,üëß,üßë,üë±,üë®,üßî,üë®‚Äçü¶∞,üë®‚Äçü¶±,üë®‚Äçü¶≥,üë®‚Äçü¶≤,üë©,üë©‚Äçü¶∞,üë©‚Äçü¶±,üë©‚Äçü¶≥,üë©‚Äçü¶≤,üë±‚Äç‚ôÄÔ∏è,üë±‚Äç‚ôÇÔ∏è,üßì,üë¥,üëµ,üôç‚Äç‚ôÇÔ∏è,üôç‚Äç‚ôÄÔ∏è,üôé,üôé‚Äç‚ôÇÔ∏è,üôé‚Äç‚ôÄÔ∏è,üôÖ‚Äç‚ôÇÔ∏è,üôÖ‚Äç‚ôÄÔ∏è,üôÜ‚Äç‚ôÇÔ∏è,üôÜ‚Äç‚ôÄÔ∏è,üíÅ‚Äç‚ôÇÔ∏è,üíÅ‚Äç‚ôÄÔ∏è,üôã‚Äç‚ôÇÔ∏è,üôã‚Äç‚ôÄÔ∏è,üôá‚Äç‚ôÇÔ∏è,üôá‚Äç‚ôÄÔ∏è,ü§¶‚Äç‚ôÇÔ∏è,ü§¶‚Äç‚ôÄÔ∏è,ü§∑‚Äç‚ôÇÔ∏è,ü§∑‚Äç‚ôÄÔ∏è,üë®‚Äç‚öïÔ∏è,üë©‚Äç‚öïÔ∏è,üë®‚Äçüéì,üë©‚Äçüéì,üë®‚Äçüè´,üë©‚Äçüè´,üë®‚Äç‚öñÔ∏è,üë©‚Äç‚öñÔ∏è,üë©‚Äçüåæ,üë©‚Äçüç≥,üë®‚Äçüîß,üë©‚Äçüîß,üë®‚Äçüè≠,üë©‚Äçüè≠,üë®‚Äçüíº,üë©‚Äçüíº,üë®‚Äçüî¨,üë©‚Äçüî¨,üë®‚Äçüíª,üë©‚Äçüíª,üë®‚Äçüé§,üë©‚Äçüé§,üë®‚Äçüé®,üë©‚Äçüé®,üë®‚Äç‚úàÔ∏è,üë©‚Äç‚úàÔ∏è,üë®‚ÄçüöÄ,üë©‚ÄçüöÄ,üë®‚Äçüöí,üë©‚Äçüöí,üëÆ‚Äç‚ôÇÔ∏è,üëÆ‚Äç‚ôÄÔ∏è,üïµÔ∏è‚Äç‚ôÇÔ∏è,üïµÔ∏è‚Äç‚ôÄÔ∏è,üíÇ‚Äç‚ôÇÔ∏è,üíÇ‚Äç‚ôÄÔ∏è,üë∑‚Äç‚ôÇÔ∏è,üë∑‚Äç‚ôÄÔ∏è,ü§¥,üë∏,üë≥‚Äç‚ôÇÔ∏è,üë≥‚Äç‚ôÄÔ∏è,üë≤,üßï,ü§µ,üë∞,ü§∞,ü§±,üëº,üéÖ,ü§∂,ü¶∏‚Äç‚ôÇÔ∏è,ü¶π‚Äç‚ôÄÔ∏è,üßô,üßô‚Äç‚ôÇÔ∏è,üßö‚Äç‚ôÇÔ∏è,üßö‚Äç‚ôÄÔ∏è,üßõ‚Äç‚ôÇÔ∏è,üßõ‚Äç‚ôÄÔ∏è,üßú,üßú‚Äç‚ôÇÔ∏è,üßú‚Äç‚ôÄÔ∏è,üßù‚Äç‚ôÇÔ∏è,üßù‚Äç‚ôÄÔ∏è,üßû‚Äç‚ôÇÔ∏è,üßû‚Äç‚ôÄÔ∏è,üßü‚Äç‚ôÇÔ∏è,üßü‚Äç‚ôÄÔ∏è,üíÜ‚Äç‚ôÇÔ∏è,üíÜ‚Äç‚ôÄÔ∏è,üíá‚Äç‚ôÇÔ∏è,üíá‚Äç‚ôÄÔ∏è,üö∂‚Äç‚ôÇÔ∏è,üö∂‚Äç‚ôÄÔ∏è,üèÉ‚Äç‚ôÇÔ∏è,üèÉ‚Äç‚ôÄÔ∏è,üíÉ,üï∫,üï¥Ô∏è,üëØ‚Äç‚ôÇÔ∏è,üßñ‚Äç‚ôÇÔ∏è,üßñ‚Äç‚ôÄÔ∏è,üßò,üë≠,üë´,üë¨,üë®‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë®,üë©‚Äç‚ù§Ô∏è‚Äçüíã‚Äçüë©,üë®‚Äç‚ù§Ô∏è‚Äçüë®,üë©‚Äç‚ù§Ô∏è‚Äçüë©,üë®‚Äçüë©‚Äçüë¶,üë®‚Äçüë©‚Äçüëß,üë®‚Äçüë©‚Äçüëß‚Äçüë¶,üë®‚Äçüë©‚Äçüë¶‚Äçüë¶,üë®‚Äçüë©‚Äçüëß‚Äçüëß,üë®‚Äçüë®‚Äçüë¶,üë®‚Äçüë®‚Äçüëß,üë®‚Äçüë®‚Äçüëß‚Äçüë¶,üë®‚Äçüë®‚Äçüë¶‚Äçüë¶,üë®‚Äçüë®‚Äçüëß‚Äçüëß,üë©‚Äçüë©‚Äçüë¶,üë©‚Äçüë©‚Äçüëß,üë©‚Äçüë©‚Äçüëß‚Äçüë¶,üë©‚Äçüë©‚Äçüë¶‚Äçüë¶,üë©‚Äçüë©‚Äçüëß‚Äçüëß,üë®‚Äçüë¶,üë®‚Äçüë¶‚Äçüë¶,üë®‚Äçüëß,üë®‚Äçüëß‚Äçüë¶,üë®‚Äçüëß‚Äçüëß,üë©‚Äçüë¶,üë©‚Äçüë¶‚Äçüë¶,üë©‚Äçüëß,üë©‚Äçüëß‚Äçüë¶,üë©‚Äçüëß‚Äçüëß";
        var emojis = emoji.split(",");
        for (i = 0; i < emojis.length; i++) {
          list += "<i>" + emojis[i] + "</i>\n";
        }
        var ui = $.summernote.ui;
        var list = ui.buttonGroup([
          ui.button({
            className: "dropdown-toggle",
            contents: '<span title="{{ l.a_summer_emoji2_ttip }}">üòÄ</span> <span class="caret"></span>',
            data: {
              toggle: "dropdown"
            }
          }),
          ui.dropdown({
            className: "dropdown-style emoji-list",
            contents: list,
            callback: function ($dropdown) {
              $dropdown.find("i").each(function () {
                $(this).click(function () {
                  context.invoke("editor.restoreRange");
                  context.invoke("editor.focus");
                  context.invoke("editor.insertText", $(this).html());
                  GSC.CopyClipboard($(this).html());
                });
              });
            }
          })
        ]);
        return list.render();
      }

      // Emoji3Selector() listbox
      var Emoji3Selector = function (context) {
        var list = "";
        var emoji = "üêµ,üôà,üôâ,üôä,üí•,üí´,üí¶,üí®,üêí,ü¶ç,üê∂,üêï,üê©,üê∫,ü¶ä,ü¶ù,üê±,üêà,ü¶Å,üêØ,üêÖ,üêÜ,üê¥,üêé,ü¶Ñ,ü¶ì,ü¶å,üêÆ,üêÇ,üêÉ,üêÑ,üê∑,üêñ,üêó,üêΩ,üêè,üêë,üêê,üê™,üê´,ü¶ô,ü¶í,üêò,ü¶è,ü¶õ,üê≠,üêÅ,üêÄ,üêπ,üê∞,üêá,üêøÔ∏è,ü¶î,ü¶á,üêª,üê®,üêº,ü¶ò,ü¶°,üêæ,ü¶É,üêî,üêì,üê£,üê§,üê•,üê¶,üêß,üïäÔ∏è,ü¶Ö,ü¶Ü,ü¶¢,ü¶â,ü¶ö,ü¶ú,üê∏,üêä,üê¢,ü¶é,üêç,üê≤,üêâ,ü¶ï,ü¶ñ,üê≥,üêã,üê¨,üêü,üê†,üê°,ü¶à,üêô,üêö,üêå,ü¶ã,üêõ,üêú,üêù,üêû,ü¶ó,üï∑Ô∏è,üï∏Ô∏è,ü¶Ç,ü¶ü,ü¶†,üíê,üå∏,üíÆ,üèµÔ∏è,üåπ,ü•Ä,üå∫,üåª,üåº,üå∑,üå±,üå≤,üå≥,üå¥,üåµ,üåæ,üåø,üçÄ,üçÅ,üçÇ,üçÉ,üçÑ,üå∞,ü¶Ä,ü¶û,ü¶ê,ü¶ë,üåç,üåé,üåè,üåê,üåë,üåí,üåì,üåî,üåï,üåñ,üåó,üåò,üåô,üåö,üåõ,üåú,üåù,üåû,‚≠ê,üåü,üå†,‚õÖ,‚õàÔ∏è,üå§Ô∏è,üå•Ô∏è,üå¶Ô∏è,üåßÔ∏è,üå®Ô∏è,üå©Ô∏è,üå™Ô∏è,üå´Ô∏è,üå¨Ô∏è,üåà,‚õÑ,üî•,üíß,üåä,üéÑ,‚ú®,üéã,üéç";
        var emojis = emoji.split(",");
        for (i = 0; i < emojis.length; i++) {
          list += "<i>" + emojis[i] + "</i>\n";
        }
        var ui = $.summernote.ui;
        var list = ui.buttonGroup([
          ui.button({
            className: "dropdown-toggle",
            contents: '<span title="{{ l.a_summer_emoji3_ttip }}">üêµ</span> <span class="caret"></span>',
            data: {
              toggle: "dropdown"
            }
          }),
          ui.dropdown({
            className: "dropdown-style emoji-list",
            contents: list,
            callback: function ($dropdown) {
              $dropdown.find("i").each(function () {
                $(this).click(function () {
                  context.invoke("editor.restoreRange");
                  context.invoke("editor.focus");
                  context.invoke("editor.insertText", $(this).html());
                  GSC.CopyClipboard($(this).html());
                });
              });
            }
          })
        ]);
        return list.render();
      }

      // Emoji4Selector() listbox
      var Emoji4Selector = function (context) {
        var list = "";
        var emoji = "üçì,üçá,üçà,üçâ,üçä,üçã,üçå,üçç,ü•≠,üçé,üçè,üçê,üçë,üçí,ü•ù,üçÖ,ü••,ü•ë,üçÜ,ü•î,ü•ï,üåΩ,üå∂Ô∏è,ü•í,ü•¨,ü•¶,üçÑ,ü•ú,üå∞,üçû,ü•ê,ü•ñ,ü•®,ü•Ø,ü•û,üßÄ,üçñ,üçó,ü•©,ü•ì,üçî,üçü,üçï,üå≠,ü•™,üåÆ,üåØ,ü•ô,ü•ö,üç≥,ü•ò,üç≤,ü•£,ü•ó,üçø,üßÇ,ü•´,üç±,üçò,üçô,üçö,üçõ,üçú,üçù,üç†,üç¢,üç£,üç§,üç•,ü•Æ,üç°,ü•ü,ü•†,ü•°,üç¶,üçß,üç®,üç©,üç™,üéÇ,üç∞,üßÅ,ü•ß,üç´,üç¨,üç≠,üçÆ,üçØ,üçº,ü•õ,üçµ,üç∂,üçæ,üç∑,üç∏,üçπ,üç∫,üçª,ü•Ç,ü•É,ü•§,ü•¢,üçΩÔ∏è,üç¥,ü•Ñ";
        var emojis = emoji.split(",");
        for (i = 0; i < emojis.length; i++) {
          list += "<i>" + emojis[i] + "</i>\n";
        }
        var ui = $.summernote.ui;
        var list = ui.buttonGroup([
          ui.button({
            className: "dropdown-toggle",
            contents: '<span title="{{ l.a_summer_emoji4_ttip }}">üçì</span> <span class="caret"></span>',
            data: {
              toggle: "dropdown"
            }
          }),
          ui.dropdown({
            className: "dropdown-style emoji-list",
            contents: list,
            callback: function ($dropdown) {
              $dropdown.find("i").each(function () {
                $(this).click(function () {
                  context.invoke("editor.restoreRange");
                  context.invoke("editor.focus");
                  context.invoke("editor.insertText", $(this).html());
                  GSC.CopyClipboard($(this).html());
                });
              });
            }
          })
        ]);
        return list.render();
      }

      // Emoji5Selector() listbox
      var Emoji5Selector = function (context) {
        var list = "";
        var emoji = "üèÜ,üéñÔ∏è,üèÖ,ü•á,ü•à,ü•â,üßó‚Äç‚ôÇÔ∏è,üßó‚Äç‚ôÄÔ∏è,üï¥Ô∏è,ü§∫,üèá,‚õ∑Ô∏è,üèÇ,üèåÔ∏è‚Äç‚ôÇÔ∏è,üèåÔ∏è‚Äç‚ôÄÔ∏è,üèÑ‚Äç‚ôÇÔ∏è,üèÑ‚Äç‚ôÄÔ∏è,üö£‚Äç‚ôÇÔ∏è,üö£‚Äç‚ôÄÔ∏è,üèä‚Äç‚ôÇÔ∏è,üèä‚Äç‚ôÄÔ∏è,‚õπÔ∏è‚Äç‚ôÇÔ∏è,‚õπÔ∏è‚Äç‚ôÄÔ∏è,üèãÔ∏è‚Äç‚ôÇÔ∏è,üèãÔ∏è‚Äç‚ôÄÔ∏è,üö¥‚Äç‚ôÇÔ∏è,üö¥‚Äç‚ôÄÔ∏è,üöµ‚Äç‚ôÇÔ∏è,üöµ‚Äç‚ôÄÔ∏è,ü§∏‚Äç‚ôÇÔ∏è,ü§∏‚Äç‚ôÄÔ∏è,ü§º‚Äç‚ôÇÔ∏è,ü§º‚Äç‚ôÄÔ∏è,ü§Ω‚Äç‚ôÇÔ∏è,ü§Ω‚Äç‚ôÄÔ∏è,ü§æ‚Äç‚ôÇÔ∏è,ü§æ‚Äç‚ôÄÔ∏è,ü§π‚Äç‚ôÇÔ∏è,ü§π‚Äç‚ôÄÔ∏è,üé≠,üßò‚Äç‚ôÇÔ∏è,üßò‚Äç‚ôÄÔ∏è,üé™,üõπ,üõ∂,üéóÔ∏è,üéüÔ∏è,üé´,‚öΩ,‚öæ,ü•é,üèÄ,üèê,üèà,üèâ,üéæ,ü•è,üé≥,üèè,üèë,üèí,ü•ç,üèì,üè∏,ü•ä,ü•ã,ü•Ö,‚õ≥,‚õ∏Ô∏è,üé£,üéΩ,üéø,üõ∑,ü•å,üéØ,üé±,üéÆ,üé∞,üé≤,üß©,üé®,üßµ,üß∂,üéº,üé§,üéß,üé∑,üé∏,üéπ,üé∫,üéª,ü•Å,üé¨,üèπ,üó£Ô∏è,üë§,üë•,üë£,üí¥,üíµ,üí∂,üí∑,üí£,üíå,üï≥Ô∏è,üõÄ,üõå,üî™,üè∫,üó∫Ô∏è,üß≠,üß±,üíà,üõ¢Ô∏è,üõéÔ∏è,üß≥,‚åõ,‚è≥,‚åö,‚è∞,‚è±Ô∏è,‚è≤Ô∏è,üï∞Ô∏è,üå°Ô∏è,‚õ±Ô∏è,üß®,üéà,üéâ,üéä,üéé,üéè,üéê,üßß,üéÄ,üéÅ,üîÆ,üßø,üïπÔ∏è,üß∏,üñºÔ∏è,üßµ,üß∂,üõçÔ∏è,üìø,üíé,üìØ,üéôÔ∏è,üéöÔ∏è,üéõÔ∏è,üìª,üì±,üì≤,üìû,üìü,üì†,üîã,üîå,üíª,üñ•Ô∏è,üñ®Ô∏è,üñ±Ô∏è,üñ≤Ô∏è,üíΩ,üíæ,üíø,üìÄ,üßÆ,üé•,üéûÔ∏è,üìΩÔ∏è,üì∫,üì∑,üì∏,üìπ,üìº,üîç,üîé,üïØÔ∏è,üí°,üî¶,üèÆ,üìî,üìï,üìñ,üìó,üìò,üìô,üìö,üìì,üìí,üìÉ,üìú,üìÑ,üì∞,üóûÔ∏è,üìë,üîñ,üè∑Ô∏è,üí∞,üí∏,üí≥,üßæ,üìß,üì®,üì©,üì§,üì•,üì¶,üì´,üì™,üì¨,üì≠,üìÆ,üó≥Ô∏è,üñãÔ∏è,üñäÔ∏è,üñåÔ∏è,üñçÔ∏è,üìù,üìÅ,üìÇ,üóÇÔ∏è,üìÖ,üìÜ,üóìÔ∏è,üìá,üìà,üìâ,üìä,üóíÔ∏è,üìã,üìå,üìç,üìé,üñáÔ∏è,üìè,üìê,üóÉÔ∏è,üóÑÔ∏è,üóëÔ∏è,üîí,üîì,üîè,üîê,üîë,üóùÔ∏è,üî®,‚õèÔ∏è,üõ†Ô∏è,üó°Ô∏è,üî´,üõ°Ô∏è,üîß,üî©,üóúÔ∏è,üîó,‚õìÔ∏è,üß∞,üß≤,üß™,üß´,üß¨,üî¨,üî≠,üì°,üíâ,üíä,üö™,üõèÔ∏è,üõãÔ∏è,üöΩ,üöø,üõÅ,üß¥,üß∑,üßπ,üß∫,üßª,üßº,üßΩ,üßØ,üõí,üö¨,üóø,üß≥,üåÇ,üéÉ,üßµ,üß∂,üëì,üï∂Ô∏è,ü•Ω,ü•º,üëî,üëï,üëñ,üß£,üß§,üß•,üß¶,üëó,üëò,üëô,üëö,üëõ,üëú,üëù,üéí,üëû,üëü,ü•æ,ü•ø,üë†,üë°,üë¢,üëë,üëí,üé©,üéì,üß¢,‚õëÔ∏è,üíÑ,üíç,üíº";
        var emojis = emoji.split(",");
        for (i = 0; i < emojis.length; i++) {
          list += "<i>" + emojis[i] + "</i>\n";
        }
        var ui = $.summernote.ui;
        var list = ui.buttonGroup([
          ui.button({
            className: "dropdown-toggle",
            contents: '<span title="{{ l.a_summer_emoji5_ttip }}">üèÜ</span> <span class="caret"></span>',
            data: {
              toggle: "dropdown"
            }
          }),
          ui.dropdown({
            className: "dropdown-style emoji-list",
            contents: list,
            callback: function ($dropdown) {
              $dropdown.find("i").each(function () {
                $(this).click(function () {
                  context.invoke("editor.restoreRange");
                  context.invoke("editor.focus");
                  context.invoke("editor.insertText", $(this).html());
                  GSC.CopyClipboard($(this).html());
                });
              });
            }
          })
        ]);
        return list.render();
      }

      // Emoji6Selector() listbox
      var Emoji6Selector = function (context) {
        var list = "";
        var emoji = "üè°,üè†,üèòÔ∏è,üö£,üóæ,üèîÔ∏è,‚õ∞Ô∏è,üåã,üóª,üèïÔ∏è,üèñÔ∏è,üèúÔ∏è,üèùÔ∏è,üèûÔ∏è,üèüÔ∏è,üèõÔ∏è,üèóÔ∏è,üèöÔ∏è,üè¢,üè£,üè§,üè•,üè¶,üè®,üè©,üè™,üè´,üè¨,üè≠,üèØ,üè∞,üíí,üóº,üóΩ,‚õ™,üïå,üïç,‚õ©Ô∏è,üïã,‚õ≤,‚õ∫,üåÅ,üåÉ,üèôÔ∏è,üåÑ,üåÖ,üåÜ,üåá,üåâ,üé†,üé°,üé¢,üöÇ,üöÉ,üöÑ,üöÖ,üöÜ,üöá,üöà,üöâ,üöä,üöù,üöû,üöã,üöå,üöç,üöé,üöê,üöë,üöí,üöì,üöî,üöï,üöñ,üöó,üöò,üöô,üöö,üöõ,üöú,üèéÔ∏è,üèçÔ∏è,üõµ,üö≤,üõ¥,üöè,üõ£Ô∏è,üõ§Ô∏è,‚õΩ,üö®,üö•,üö¶,üöß,‚õµ,üö§,üõ≥Ô∏è,‚õ¥Ô∏è,üõ•Ô∏è,üö¢,üõ©Ô∏è,üõ´,üõ¨,üí∫,üöÅ,üöü,üö†,üö°,üõ∞Ô∏è,üöÄ,üõ∏,üå†,üåå,‚õ±Ô∏è,üéÜ,üéá,üéë,üõÇ,üõÉ,üõÑ,üõÖ";
        var emojis = emoji.split(",");
        for (i = 0; i < emojis.length; i++) {
          list += "<i>" + emojis[i] + "</i>\n";
        }
        var ui = $.summernote.ui;
        var list = ui.buttonGroup([
          ui.button({
            className: "dropdown-toggle",
            contents: '<span title="{{ l.a_summer_emoji6_ttip }}">üè°</span> <span class="caret"></span>',
            data: {
              toggle: "dropdown"
            }
          }),
          ui.dropdown({
            className: "dropdown-style emoji-list",
            contents: list,
            callback: function ($dropdown) {
              $dropdown.find("i").each(function () {
                $(this).click(function () {
                  context.invoke("editor.restoreRange");
                  context.invoke("editor.focus");
                  context.invoke("editor.insertText", $(this).html());
                  GSC.CopyClipboard($(this).html());
                });
              });
            }
          })
        ]);
        return list.render();
      }

      // Emoji7Selector() listbox
      var Emoji7Selector = function (context) {
        var list = "";
        var emoji = "üíò,üíù,üíñ,üíó,üíì,üíû,üíï,üíü,üíî,üß°,üíõ,üíö,üíô,üíú,üñ§,üíØ,üí¢,üí¨,üëÅÔ∏è‚Äçüó®Ô∏è,üó®Ô∏è,üóØÔ∏è,üí≠,üí§,üíÆ,üõë,üïõ,üïß,üïê,üïú,üïë,üïù,üïí,üïû,üïì,üïü,üïî,üï†,üïï,üï°,üïñ,üï¢,üïó,üï£,üïò,üï§,üïô,üï•,üïö,üï¶,üåÄ,üÉè,üÄÑ,üé¥,üîá,üîà,üîâ,üîä,üì¢,üì£,üìØ,üîî,üîï,üéµ,üé∂,üíπ,üèß,üöÆ,üö∞,üöπ,üö∫,üöª,üöº,üöæ,üö∏,‚õî,üö´,üö≥,üö≠,üöØ,üö±,üö∑,üìµ,üîû,‚§¥Ô∏è,‚§µÔ∏è,üîÉ,üîÑ,üîô,üîö,üîõ,üîú,üîù,üõê,üïâÔ∏è,üïé,üîØ,‚õé,üîÄ,üîÅ,üîÇ,‚è©,‚è≠Ô∏è,‚èØÔ∏è,‚è™,‚èÆÔ∏è,üîº,‚è´,üîΩ,‚è¨,‚è∏Ô∏è,‚èπÔ∏è,‚è∫Ô∏è,üé¶,üîÖ,üîÜ,üì∂,üì≥,üì¥,‚ûï,‚ûñ,‚ûó,‚ùì,‚ùî,‚ùï,‚ùó,„Ä∞Ô∏è,üí±,üí≤,üî±,üìõ,üî∞,‚≠ï,‚ùå,‚ùé,‚û∞,‚ûø,„ÄΩÔ∏è,#Ô∏è‚É£,*Ô∏è‚É£,0Ô∏è‚É£,1Ô∏è‚É£,2Ô∏è‚É£,3Ô∏è‚É£,4Ô∏è‚É£,5Ô∏è‚É£,6Ô∏è‚É£,7Ô∏è‚É£,8Ô∏è‚É£,9Ô∏è‚É£,üîü,üî†,üî°,üî¢,üî£,üî§,üÖ∞Ô∏è,üÜé,üÖ±Ô∏è,üÜë,üÜí,‚ìÇÔ∏è,üÜì,‚ÑπÔ∏è,üÜï,üÜñ,üÜó,üÜô,üÖøÔ∏è,üÖæÔ∏è,üÜò,üÜî,üÜö,üàÅ,üàÇÔ∏è,üà∑Ô∏è,üà∂,üàØ,üâê,üàπ,üàö,üà≤,üâë,üà∏,üà¥,üà≥,üà∫,üàµ,üî¥,üîµ,‚ö´,‚ö™,‚¨õ,‚¨ú,üî∂,üî∑,üî∏,üîπ,üî∫,üîª,üí†,üîò,üî≥,üî≤,üèÅ,üö©,üéå,üè¥,üè≥Ô∏è,üè≥Ô∏è‚Äçüåà,üè¥‚Äç‚ò†Ô∏è";
        var emojis = emoji.split(",");
        for (i = 0; i < emojis.length; i++) {
          list += "<i>" + emojis[i] + "</i>\n";
        }
        var ui = $.summernote.ui;
        var list = ui.buttonGroup([
          ui.button({
            className: "dropdown-toggle",
            contents: '<span title="{{ l.a_summer_emoji7_ttip }}">üíò</span> <span class="caret"></span>',
            data: {
              toggle: "dropdown"
            }
          }),
          ui.dropdown({
            className: "dropdown-style emoji-list",
            contents: list,
            callback: function ($dropdown) {
              $dropdown.find("i").each(function () {
                $(this).click(function () {
                  context.invoke("editor.restoreRange");
                  context.invoke("editor.focus");
                  context.invoke("editor.insertText", $(this).html());
                  GSC.CopyClipboard($(this).html());
                });
              });
            }
          })
        ]);
        return list.render();
      }

      // PluginSelector() listbox
      var PluginSelector = function (context) {
        var ui = $.summernote.ui;
        var list = ui.buttonGroup([
          ui.button({
            className: "dropdown-toggle",
            contents: '<span title="{{ l.a_summer_plugins_ttip }}" class="fas fa-plug"></> <span class="caret"></span>',
            data: {
              toggle: "dropdown"
            }
          }),
          ui.dropdown({
            className: "dropdown-style",
            contents: "",
            <!-- contents: '<ol><li data-copy=\' [remote_content url=""] \'>remote_content</li></ol>', -->
            callback: function ($dropdown) {
              $dropdown.find("li").each(function () {
                $(this).click(function () {
                  context.invoke("editor.restoreRange");
                  context.invoke("editor.focus");
                  context.invoke("editor.insertText", $(this).data("copy"));
                  GSC.CopyClipboard($(this).data("copy"));
                });
              });
            }
          })
        ]);
        return list.render();
      }

      // FullScreen() button
      var FullScreenButton = function (context) {
        var ui = $.summernote.ui;
        var button = ui.button({
          contents: '<span title="{{ l.a_summer_fullscreen_ttip }}"><i class="fas fa-expand"></i></span>',
          codeviewKeepButton: true,
          click: function (e) {
            context.invoke("fullscreen.toggle");
            context.invoke("codeview.toggle");
          }
        });
        return button.render();
      }

      // Summernote configuration
      $(".summernote").summernote({
        codeviewFilter: true,
        codeviewIframeFilter: true,
        dialogsInBody: false,
        disableDragAndDrop: true,
        height: 300,
        codemirror: {
          theme: "material-darker"
        },
        lang: '{{#langcs}}cs-CZ{{/langcs}}{{#langen}}en-US{{/langen}}',
        maximumImageFileSize: 1024 * 1024 * 4,
        placeholder: '{{#langcs}}V√≠tejte v Summernote!{{/langcs}}{{#langen}}Welcome to Summernote!{{/langen}}',
        callbacks: {
          onChange: function (contents, $editable) {
            $("div.note-btn-group.note-custom2>button").removeClass("blue").addClass("red");
          }
        },
        tableClassName: "table table-bordered striped highlight responsive-table",
        styleTags: [
          "p", "blockquote", "pre", "h2", "h3", "h4", "h5", "h6",
        ],
        lineHeights: [
          "0.2", "0.3", "0.4", "0.5", "0.6", "0.8", "1.0", "1.2", "1.4", "1.5", "2.0", "3.0"
        ],
        fontSizes: [
          "6", "7", "8", "9", "10", "11", "12", "14", "16", "18", "20", "24", "30", "36", "42", "48", "55", "64", "82", "100", "130", "160", "200"
        ],
        toolbar: [
          ["style", ["style"]],
          ["font", ["bold", "italic", "underline", "fontsize", "fontname", "strikethrough", "superscript", "subscript", "clear"]],
          ["color", ["forecolor", "backcolor", "color"]],
          ["paragraph", ["ul", "ol", "paragraph", "height"]],
          ["table", ["table"]],
          ["insert", ["hr", "link", "picture", "video"]],
          ["history", ["undo", "redo"]],
          ["emojis", ["emoji1", "emoji2", "emoji3", "emoji4", "emoji5", "emoji6", "emoji7"]],
          ["view", ["fs"]],
          ["custom1", ["plugins", "history"]],
          ["close", ["destroy"]],
          ["custom2", ["saveall"]],
        ],
        buttons: {
          destroy: DestroyButton,
          emoji1: Emoji1Selector,
          emoji2: Emoji2Selector,
          emoji3: Emoji3Selector,
          emoji4: Emoji4Selector,
          emoji5: Emoji5Selector,
          emoji6: Emoji6Selector,
          emoji7: Emoji7Selector,
          plugins: PluginSelector,
          fs: FullScreenButton,
          history: HistorySelector,
          saveall: SaveAllButton,
        }
      });
      $("#a_summernote").removeAttr("disabled");
    }

    // setup admin UI
    w.GSC.init.push(function () {
      w.GSC.names.push("admin UI - bind");

      // admin show
      if (!getCookie("motyle") || getCookie("motyle") == "false") {
        $("#admin_main").show(100);
      }

      // wrench
      $(".motyle").click(function () {
        $("#admin_main").toggle(200, function () {
          window.scrollTo(0, 0);
          setCookie("motyle", $("#admin_main").is(":hidden"));
        })
      });

      // articles URL selector
      $("#ArticleURLSelect").change(function () {
        window.location.pathname = $('#ArticleURLSelect').val();
      });

      // remote function selector
      $("#RemoteFnSelect").change(function () {
        if (w.GSC.offline) {
          M.toast({text: "offline üì∂"});
          return GSC.PingDot("#sectok_ping", false);
        }
        if (!$("#RemoteFnSelect").val()) return;

        // API: GetUpdateToken
        $.get("/admin/GetUpdateToken?" + Date.now(), function (data) {
          var s = $("#RemoteFnSelect").val();
          var t = data.data[0];
          t = t.replace(/[a-zA-Z]*\?/, s + "?");
          GSC.CopyClipboard(t);
          GSC.PingDot("#sectok_ping");
          M.toast({text: s + " {{ l.a_remotecode }}: {{ l.a_clipboardcopy }}"});
        }).fail(function () {
          $("#a_security_token").val("N/A");
          GSC.PingDot("#sectok_ping", false);
          GSC.CopyClipboard("");
          M.toast({text: "{{ l.a_error_general }}"});
        });
      });

      // update CSV data
      $("#a_update").click(function () {
        if (w.GSC.offline) {
          M.toast({text: "offline üì∂"});
          return GSC.PingDot("#csv_ping", false);
        }
        $("#a_update").attr("disabled", "disabled");
        setTimeout(function () {
          $("#a_update").removeAttr("disabled");
        }, 30E3);

        // API: CoreUpdate
        $.post("/admin/CoreUpdate");
        M.toast({text: "{{ l.a_processing_data }}"});
      });

      // invoke Summernote editor
      $("#a_summernote").click(function () {
        if (w.GSC.offline) {
          M.toast({text: "offline üì∂"});
          return GSC.PingDot("#psi_ping", false);
        }
        GSC.ReadArticles(function () {
          GSC.DeploySummernote();
        });
      });

      // file manager
      $("#a_files").click(function () {
        if (w.GSC.offline) {
          M.toast({text: "offline üì∂"});
          return GSC.PingDot("#csv_ping", false);
        }
        // clear file & upload content if present
        if (getCookie("open_filemanager") == 1) {
          {{#langcs}}
          M.toast({text: 'ü´ô VYPNUTO'});
          {{/langcs}}
          {{#langen}}
          M.toast({text: 'ü´ô OFF'});
          {{/langen}}
          return GSC.CloseFileManager();
        }
        {{#langcs}}
        M.toast({text: 'ü´ô ZAPNUTO'});
        {{/langcs}}
        {{#langen}}
        M.toast({text: 'ü´ô ON'});
        {{/langen}}
        GSC.RenderUploadInfo();
      });

      // GSC.CloseFileManager
      if (typeof GSC.CloseFileManager !== "function") GSC.CloseFileManager = function() {
          delCookie("open_filemanager");
          $("#a_file_manager").hide(50);
          $("#a_uploader_progress").html("");
      }

      // GSC.RenderUploadInfo()
      if (typeof GSC.RenderUploadInfo !== "function") GSC.RenderUploadInfo = function() {
        $.get("/admin/getUploads?" + Date.now(), function (data) {
          if (data && data.data && data.data.files) {

            // remember state
            setCookie("open_filemanager", 1);

            var s = '';
            var now = ~~(Date.now() / 1000);
            moment.locale("{{ lang }}");

            // UPLOAD: render HTML
            var wt = [];
            wt[160] = 'S';
            wt[320] = 'M';
            wt[640] = 'L';

            // no files
            if (data.data.count == 0) {
              s = '<div style="font-size:3rem;">üê± üí§</div>';
            } else {
              var t = 0;
              for (var i in data.data.files) {
                t++;
                if (t == 1) {
                  s += '<div class="row">';
                }
  
                // extension
                var name = data.data.files[i]["name"];
                var name1 = name;
                var name2 = name.replace(/\.[^.]+$/, '.webp');
                var ext = GSC.GetFileExtension(name);
  
                if (data.data.files[i]["thumbnails"] == null) {
                  // clickable icon
                  s += '<div style="margin:0;padding:1rem;height:300px;background-color:#222;border:1px solid #000;" id="fig' + t + '" class="left-align bottom col l2 m4 s12" onmouseover="this.style.backgroundColor=\'#444\';" onmouseout="this.style.backgroundColor=\'#222\';">'
                    + '<a title="{{ l.a_open_tit }}" class="hover" style="font-size:2rem;" ';
                  s += 'onclick="javascript:window.open(\'/upload/' + name + '\', \'preview\', \'location,resizable,scrollbars,status\');">';
                  s += 'üìÑ<br><span style="font-size:1rem!important">' + name + '<br></span></a>';
                } else {
                  // clickable thumbnail
                  s += '<div style="margin:0;padding:1rem;height:300px;background-color:#222;border:1px solid #000;" id="fig' + t + '" class="left-align bottom col l2 m4 s12" onmouseover="this.style.backgroundColor=\'#444\';" onmouseout="this.style.backgroundColor=\'#222\';">'
                    + '<a title="{{ l.a_open_tit }}" class="hover" ';
                  s += 'onclick="javascript:window.open(\'/upload/' + name + '\', \'preview\', \'location,resizable,scrollbars,status\');">';
                  if (data.data.files[i]["thumbnails"][160]) s += '<img alt="thumbnail" class="responsive-img" height=250 src="{{ cdn }}/upload/' + data.data.files[i]["thumbnails"][160] + '"><br>';
                  s += '</a>';
                }
  
                // file age and size
                s += '<span>‚è≥Ô∏è&nbsp;';
                s += moment.duration(Math.abs(~~((now - data.data.files[i]["timestamp"]))), "seconds").humanize();
                s += '&nbsp;ü´ô&nbsp;';
                s += GSC.FormatBytes(data.data.files[i]["size"]);
                s += '</span>';
  
                // SML copy buttons
                var sml = '';
                for (var j in data.data.files[i]["thumbnails"]) {
                  name = data.data.files[i]["thumbnails"][j];
                  sml += '<span title="üìã {{ l.a_copy_tit }} ' + name + '" style="font-size:1.2rem" class="mobilebutt extrapadding left hover copydata" data-text="{{ BASE }}upload/' + name + '">' + wt[j] + 'üìã</span>';
                }
                if (sml.length) {
                  s += '<div class="row extrapadding">';
                  s += sml;
                  s += '</div>';
                }
  
                if (data.data.files[i]["thumbnails"] === null) {
                  // delete
                  s += '<div class="row extrapadding">';
                  s += '&nbsp;<span title="üóë {{ l.a_delete_tit }}" style="font-size:1.5rem" class="mobilebutt left hover delete" data-fig="' + t + '" data-id="' + name1 + '">‚ùå</span>&nbsp;';
                  s += '<span title="üìã {{ l.a_copy_tit }} ' + name + '" style="font-size:1.2rem" class="mobilebutt extrapadding right hover copydata" data-text="{{ BASE }}upload/' + name1 + '">' + ext + 'üìã</span>';
                  s += '</div>';
                }
                else {
                  // delete + thumbnails copy buttons
                  s += '<div class="row extrapadding">';
                  s += '<span title="üóë {{ l.a_delete_tit }}" style="font-size:1.5rem" class="mobilebutt left hover delete" data-fig="' + t + '" data-id="' + name1 + '">‚ùå</span>&nbsp;';
                  s += '<span title="üìã {{ l.a_copy_tit }} ' + name1 + '" style="font-size:1.2rem" class="mobilebutt extrapadding right hover copydata" data-text="{{ BASE }}upload/' + name1 + '">' + ext + 'üìã</span>';
                  if (ext != 'webp') {
                    s += '<span title="üìã {{ l.a_copy_tit }} ' + name2 + '" style="font-size:1.2rem" class="mobilebutt extrapadding right hover copydata" data-text="{{ BASE }}upload/' + name2 + '">webpüìã</span>';
                  }
                  s += '</div>';
                }
                s += '</div>';
              }
              if (t) {
                s += "</div>";
              }
            }
            
            // show file manager
            if ($("#a_file_manager").html() != "") {
              $("#a_file_manager").html(s).show();
            } else {
              $("#a_file_manager").hide().html(s).show(200);
            }
            
            // UPLOAD: copy path to clipboard
            $("#a_file_manager .copydata").click(function () {
              var x = $(this).data("text");
              GSC.CopyClipboard(x);
              M.toast({text: "üìã " + x});
            });
            
            // UPLOAD: file delete
            $("#a_file_manager .delete").click(function () {
              if (GSC.deleteconfirmed || confirm("{{ l.a_delete_tit }}?")) {
                GSC.deleteconfirmed = true;
                var x = $(this).data("id");
                var fig = $(this).data("fig");
                $('#fig' + fig).hide(250);

                // API: UploadedFileDelete
                $.post("/admin/uploadDelete", {
                  name: x
                }).done(function (data) {
                  M.toast({text: "üöÆ " + x});
                  GSC.RenderUploadInfo();
                });
              }
            });
          }
        });
      }

      // flush cache
      $("#a_flush").click(function () {
        if (w.GSC.offline) {
          M.toast({text: "offline üì∂"});
          return GSC.PingDot("#csv_ping", false);
        }
        GSC.GetCsvInfo = function () {};
        $("#a_flush").attr("disabled", "disabled");

        // API: FlushCache
        $.post("/admin/FlushCache");
        location.replace("/?nonce={{ nonce }}"); // reload window
      });

      $("#a_logout").click(function () {
        setCookie("logout", "logout");
        GSC.offline ? window.location.replace("/?nonce={{ nonce }}") : window.location.replace("/logout");
      });

    });

    // setup CSV info timer
    w.GSC.init.push(function () {
      w.GSC.names.push("CSV timer");
      setInterval(function () {
        window.GSC.GetCsvInfo();
      }, 2500);
      GSC.GetCsvInfo();
    });

    // show admin UI
    w.GSC.init.push(function () {
      w.GSC.names.push("show admin UI");
      GSC.AdminUI();

      // filemanager state
      if (getCookie("open_filemanager") == 1) {
        $("#a_file_manager").hide();
        GSC.RenderUploadInfo();
      }
    });

    // setup ZeroUpload
    w.GSC.init.push(function () {
      w.GSC.names.push("ZeroUpload");
      ZeroUpload.setURL("/admin/upload");
      ZeroUpload.setMaxFiles(100);
      ZeroUpload.setMaxBytes(100 * 1024 * 1024); // 100 MB

      ZeroUpload.on("complete", function (response) {
        M.toast({text: "{{ l.a_uploading_finished }}"});
        var data = JSON.parse(response.data);
        if (data && data.data) {
          setCookie("open_filemanager", 1);
          GSC.RenderUploadInfo();
          return;
        }
      });

      ZeroUpload.on("start", function (files, userData) {
        M.toast({text: "{{ l.a_uploading }}"});
      });

      ZeroUpload.on("error", function (type, message, userData) {
        var s;
        switch (type) {
          case "maxbytes":
            s = "{{ l.a_upload_maxbytes }}";
            break;
          case "unsupported":
            s = "{{ l.a_upload_unsupported }}";
            break;
          case "maxfiles":
            s = "{{ l.a_upload_maxfiles }}";
            break;
          case "filetype":
            s = "{{ l.a_upload_filetype }}";
            break;
          case "http":
            s = "{{ l.a_upload_http }}";
            break;
          default:
            s = "{{ l.a_upload_ajax }}";
        }
        M.toast({text: s});
      });

      ZeroUpload.on("progress", function (progress, userData) {
        $("#a_uploader_progress").show(200).html(
          '<h5>{{ l.a_upload_ttip }}</h5><div style="padding:1em"><div class="row">' +
          '<strong>Progress:</strong> ' + progress.percent + ', ' +
          progress.elapsedHuman + ' elapsed</div>' +
          '<div><strong>Sent:</strong> ' + progress.dataSentHuman + ' of ' +
          progress.dataTotalHuman + ' (' + progress.dataRateHuman + ')</div>' +
          '<div><strong>Remaining:</strong> ' + progress.remainingTimeHuman + '</div></div>'
        );
      });

      // init uploader
      ZeroUpload.init();
      ZeroUpload.addDropTarget("#admin_main");

      // UI: upload button
      $("#a_upload").click(function () {
        if (w.GSC.offline) {
          M.toast({text: "offline üì∂"});
          return GSC.PingDot("#csv_ping", false);
        }
        $("#a_uploader_progress").html("");
        ZeroUpload.chooseFiles();
      });
    });

    
  } // end GSC.init
})(window, document);
