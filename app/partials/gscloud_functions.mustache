<script nonce="{{ csp_nonce }}">
'use strict';

// CREATE LUID
var luid = null;
try {
  luid = crypto.randomUUID();
} catch (e) {
  luid = ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,
      c => (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
  );
}

// LOCAL STORAGE TEST + SET UUID
var nolocalstorage = false;
try {
  if (localStorage) {
    if (!localStorage['luid'] || localStorage['luid'].length !== 36) {
      localStorage['luid'] = luid;
    }
  }
} catch (e) {
  nolocalstorage = true;
  console.log('WARNING: localStorage is blocked');
}

// COMPUTE SHA-256 HASH
async function sha256(message) {
  const encoder = new TextEncoder();
  const data = encoder.encode(message);
  const hashBuffer = await crypto.subtle.digest('SHA-256', data);
  const hashArray = Array.from(new Uint8Array(hashBuffer));
  const hash = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
  return hash;
}

(function(w, d, undefined) {
    w.GSC.scroll = 0;
    w.GSC.scrolled = 0;

  // CREATE PROGRESS BAR
  var pbar = "_" + Date.now();
  w.GSC.pbarid = pbar;
  d.getElementsByTagName("body")[0].insertAdjacentHTML(
    "beforeend",
    '<div class="progress-container"><div class="progress-bar" id="' + pbar + '"></div></div>'
  );

  // PROGRESS BAR on SCROLLING
  window.ontouchmove = onscroll;
  window.onscroll = onscroll;
  function onscroll() {
    var scroll = d.body.scrollTop || d.documentElement.scrollTop;
    var height = d.documentElement.scrollHeight - d.documentElement.clientHeight;
    var scrolled = Math.round(scroll * 100 / height);
    if (d.getElementById(pbar)) {
      d.getElementById(pbar).style.width = scrolled + '%';
    }
    w.GSC.scroll = scroll;
    w.GSC.scrolled = scrolled;
    if (scroll > 300) {
      d.getElementById('movetotop').style.opacity = 100;
      d.getElementById('movetotop').style.visibility = 'visible';
    }
    if (scroll < 200) {
      d.getElementById('movetotop').style.opacity = 0;
      d.getElementById('movetotop').style.visibility = 'hidden';
    }
  };

  // NETWORK STATUS
  function checkNetwork() {
    if ("onLine" in navigator) {
      if (navigator.onLine) {
        d.getElementsByTagName("html")[0].setAttribute("offline", false);
        d.getElementsByTagName("html")[0].setAttribute("online", true);
        if (d.getElementById("offline-message")) d.getElementById("offline-message").setAttribute("aria-hidden", true);
        if (w.GSC) {
          w.GSC.offline = false;
          w.GSC.online = true;
          w.GSC.OauthUnhide();
        }
      } else {
        d.getElementsByTagName("html")[0].setAttribute("offline", true);
        d.getElementsByTagName("html")[0].setAttribute("online", false);
        if (d.getElementById("offline-message")) d.getElementById("offline-message").setAttribute("aria-hidden", false);
        if (w.GSC) {
          w.GSC.offline = true;
          w.GSC.online = false;
          w.GSC.OauthHide();
        }
      }
    }
  }

  // ONLINE DETECTION
  if ("onLine" in navigator) {
    w.addEventListener("load", function() {
      w.addEventListener("online", checkNetwork);
      w.addEventListener("offline", checkNetwork);
    });
  }

  // setCookie()
  if (typeof window.setCookie !== "function") window.setCookie = function(key, value, days) {
    if (key === undefined) return false;
    if (value === undefined) return false;
    if (days === undefined) days = 31;
    if (days == 0) { // session cookie      
      document.cookie = key + "=" + value + ";path=/";
    } else {
      var d1 = new Date().getTime();
      var d2 = d1 + (parseInt(days) * 86400 * 1000); // time is in miliseconds
      document.cookie = key + "=" + value + ";path=/" + ";expires=" + new Date(d2).toGMTString();
    }
  }

  // getCookie()
  if (typeof window.getCookie !== "function") window.getCookie = function(key) {
    if (key === undefined) return false;
    var v = document.cookie.match('(^|;) ?' + key + '=([^;]*)(;|$)');
    return v ? v[2] : null;
  }

  // delCookie()
  if (typeof window.delCookie !== "function") window.delCookie = function(key) {
    if (key === undefined) return false;
    var date = new Date();
    date.setTime(0);
    document.cookie = key + "=;path=/" + ";expires=" + date.toGMTString();
  }

  // ########################### GSC NAMESPACE ###############################
  if (w.GSC) {
    GSC.data = {};
    GSC.nolocalstorage = false;
    if (nolocalstorage) {
      GSC.localStorage = [];
      GSC.nolocalstorage = true;
    }
    GSC.isadmin = {{#admin_group_admin}}true{{/admin_group_admin}}{{^admin_group_admin}}false{{/admin_group_admin}};
    GSC.islogged = {{#admin}}true{{/admin}}{{^admin}}false{{/admin}};
    GSC.uid = "{{ COOKIE.UID }}";
    GSC.profile = 'default'; // deprecated

    // automatic UID AJAX setup
    $.ajaxSetup({
      beforeSend: function(xhr) {
        xhr.setRequestHeader('X-UID', GSC.uid);
      },
      complete: function(xhr, status) {
        if (status === 'error' && xhr.status === 401) {
          console.error('Unexpected error 401');
        }
      }
    });

    // feature detection: "touch"
    GSC.touch = ("ontouchstart" in w || w.DocumentTouch && d instanceof DocumentTouch) ? true : false;
    if (GSC.touch) d.getElementsByTagName("html")[0].setAttribute("touch", true);

    // hide OAuth anchors when offline
    if (typeof GSC.OauthHide !== "function") GSC.OauthHide = function() {
      $('.oauth').addClass('hide');
    }

    // show OAuth anchors when online
    if (typeof GSC.OauthUnhide !== "function") GSC.OauthUnhide = function() {
      $('.oauth').removeClass('hide');
    }

    // GSC.FormatBytes(integer)
    if (typeof GSC.FormatBytes !== "function") GSC.FormatBytes = function(number, precision) {
      number = parseInt(number);
      if (precision === undefined) precision = 2;
      if (!number) return "0";
      var c = 1024,
        e = ["B", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"],
        f = Math.floor(Math.log(number) / Math.log(c));
      return parseFloat((number / Math.pow(c, f)).toFixed(precision)) + "&nbsp;" + e[f];
    }

    // GSC.GetTime(string)
    if (typeof GSC.GetTime !== "function") GSC.GetTime = function(dateString) {

      function englishExt(x) {
        x = ("" + x).slice(-1);
        if (x == 1) return "st";
        if (x == 2) return "nd";
        if (x == 3) return "rd";
        return "th";
      }

      var dayz = ["", "{{l.day_of_the_week_1}}", "{{l.day_of_the_week_2}}", "{{l.day_of_the_week_3}}",
        "{{l.day_of_the_week_4}}", "{{l.day_of_the_week_5}}", "{{l.day_of_the_week_6}}",
        "{{l.day_of_the_week_7}}"
      ];
      var monthz = ["", "{{l.month_1}}", "{{l.month_2}}", "{{l.month_3}}", "{{l.month_4}}",
        "{{l.month_5}}", "{{l.month_6}}", "{{l.month_7}}", "{{l.month_8}}", "{{l.month_9}}",
        "{{l.month_10}}", "{{l.month_11}}", "{{l.month_12}}"
      ];
      var monthz2p = ["", "{{l.month_2p_1}}", "{{l.month_2p_2}}", "{{l.month_2p_3}}", "{{l.month_2p_4}}",
        "{{l.month_2p_5}}", "{{l.month_2p_6}}", "{{l.month_2p_7}}", "{{l.month_2p_8}}", "{{l.month_2p_9}}",
        "{{l.month_2p_10}}", "{{l.month_2p_11}}", "{{l.month_2p_12}}"
      ];

      if (dateString === undefined) {
        var z = new Date();
      } else {
        var z = new Date(dateString);
      }
      var x = {};
      x.day = ("" + z.getDay());
      x.day_str = dayz[z.getDay()];
      x.h = ("" + z.getHours());
      x.hh = ("0" + z.getHours()).slice(-2);
      x.yy = ("" + z.getFullYear()).slice(-2);
      x.yyyy = ("" + z.getFullYear());
      x.m = ("" + (z.getMonth() + 1));
      x.mm = ("0" + (z.getMonth() + 1)).slice(-2);
      x.month_str = monthz[x.m];
      x.month_str2p = monthz2p[x.m];
      x.d = z.getDate();
      x.dd = ("0" + z.getDate()).slice(-2);
      x.today = x.dd + "." + x.mm + "." + x.yyyy;
      if ("{{ langcs }}") { // Czech locale
        x.today_str = x.day_str + " " + x.d + ". " + monthz2p[x.m] + " " + x.yyyy;
      }
      if ("{{ langen }}") { // English locale
        x.today_str = x.day_str + " " + x.d + englishExt(x.d) + " " + monthz[x.m] + ", " + x.yyyy;
      }
      x.d = z;
      return x;
    }

    // GSC.CopyClipboard(data) - copy data to clipboard
    if (typeof GSC.CopyClipboard !== "function") GSC.CopyClipboard = function(data) {
      var el = d.createElement("textarea");
      el.value = data;
      el.setAttribute("readonly", "");
      el.style.position = "absolute";
      el.style.left = "-9999px";
      d.body.appendChild(el);
      var selected =
        d.getSelection().rangeCount > 0 ? d.getSelection().getRangeAt(0) : false;
      el.select();
      d.execCommand("copy");
      d.body.removeChild(el);
      if (selected) {
        d.getSelection().removeAllRanges();
        d.getSelection().addRange(selected);
      }
    }

    // GSC.GetFileExtension(filename) - get filename extension
    if (typeof GSC.GetFileExtension !== "function") GSC.GetFileExtension = function(filename) {
      if (filename) {
          return filename.slice((filename.lastIndexOf(".") - 1 >>> 0) + 2);
      }
      return '';
    }

    // GSC.GetFileName(path) - get filename from path
    if (typeof GSC.GetFileName !== "function") GSC.GetFileName = function(path) {
      if (path) {
        const parts = path.split(/[/\\]/); 
        return parts[parts.length - 1];
      }
      return '';
    }

    // GSC.CopyThisText() - copy text from element to clipboard; show tooltip
    if (typeof GSC.CopyThisText !== "function") GSC.CopyThisText = function(that) {
      if (that) {
        var t = $(that).data("copy").trim();
        if (!t) {
          t = $(that).text().trim();
        }
        GSC.CopyClipboard(t);
        M.toast({text: "ðŸ“‹ " + t, classes: "normaltoast"});
      }
    }

    // GSC.CopyThisHtml() - copy HTML from element to clipboard; show tooltip
    if (typeof GSC.CopyThisHtml !== "function") GSC.CopyThisHtml = function(that) {
      if (that) {
        var t = $(that).text().trim();
        var h = $(that).html().trim();
        GSC.CopyClipboard(h);
        M.toast({text: "ðŸ“‹ " + t, classes: "normaltoast"});
      }
    }

    // GSC.VersionCheck()
    GSC.init.push(function() {
      {{#disable_version_check}}GSC.VersionCheck = function(){};{{/disable_version_check}}
      {{#disable_version_check}}GSC.names.push("VersionCheck disabled");{{/disable_version_check}}
      {{^disable_version_check}}GSC.names.push("VersionCheck");{{/disable_version_check}}
      if (typeof GSC.VersionCheck !== "function") GSC.VersionCheck = function() {
        if (!GSC.offline) {
          // check core consistency
          $.post("/version/core", function(post) {
            if (post.data.LASAGNA.core.version) {
              if (post.data.LASAGNA.core.version != GSC.LASAGNA.core.version) {
                $("#update-message").show().focus();
                $('#update-button').click(function() {
                  location.replace(location.pathname + '?nonce={{ nonce }}');
                });
                GSC.VersionCheck = function(){};
                return;
              }
            }
            // check cdn hash
            if (post.data.LASAGNA.core.cdn) {
              if (post.data.LASAGNA.core.cdn != GSC.LASAGNA.core.cdn) {
                $("#update-message").show().focus();
                $('#update-button').click(function() {
                  location.replace(location.pathname + '?nonce={{ nonce }}');
                });
                GSC.VersionCheck = function(){};
                return;
              }
            }
          });
          // check data consistency
          $.post("/{{ lang }}/version/data", function(post) {
            if (post.data.LASAGNA.data.version) {
              if (post.data.LASAGNA.data.version != GSC.LASAGNA.data.version) {
                $("#update-message").show().focus();
                $('#update-button').click(function() {
                  location.replace(location.pathname + '?nonce={{ nonce }}');
                });
                GSC.VersionCheck = function(){};
                return;
              }
            }
          });
          setTimeout(function() {GSC.VersionCheck()}, 30000);
        }
      }
      setTimeout(function() {GSC.VersionCheck()}, 5000);
    });

    // GSC.ReadArticles()
    GSC.init.push(function() {
      {{#disable_articles}}GSC.ReadArticles = function(){$(".summernote").html("");};{{/disable_articles}}
      {{#disable_articles}}GSC.names.push("ReadArticles (disabled)");{{/disable_articles}}
      {{^disable_articles}}GSC.names.push("ReadArticles");{{/disable_articles}}
      GSC.articles_rendered = false;
      if (typeof GSC.ReadArticles !== "function") GSC.ReadArticles = function(callback) {
        var html = '';
        if (nolocalstorage) {
          html = GSC.localStorage["articles_" + GSC.profile + "_{{ request_path_hash }}"] || "";
        } else {
          html = localStorage["articles_" + GSC.profile + "_{{ request_path_hash }}"] || "";
        }
        if (html != "") {
          var obj = JSON.parse(html);
          for (var p in obj) if (obj.hasOwnProperty(p)) {
            if (obj[p] == "<p><br></p>") {
              obj[p] = " ";
            }
            $("#" + p).html(obj[p]);
          }
          // fix Summernote
          $(".summernote ul").addClass("browser-default");
          $(".summernote img").addClass("responsive-img");
          GSC.articles_rendered = true;
        }

        //  check later if offline
        if (GSC.summernote_on || GSC.offline) {
          setTimeout(function() {GSC.ReadArticles()}, 10000);
          if (!GSC.articles_rendered) {
            $(".summernote").html("ðŸ“µ");
          }
          return false;
        }

        // get articles data
        $.get("/ReadArticles/" + GSC.profile + "/{{ request_path_hash }}?" +
            Date.now() + "&crc=" + (GSC.data.articlescrc || ""), function(data) {
          if (data && data.data) {
            if (nolocalstorage) {
              GSC.localStorage["articles_" + GSC.profile + "_{{ request_path_hash }}"] = data.data.html;
            } else {
              localStorage["articles_" + GSC.profile + "_{{ request_path_hash }}"] = data.data.html;
            }
            if (data.data.crc) {
              GSC.data.articlescrc = data.data.crc;
              if (data.data.html != "") {
                var obj = JSON.parse(data.data.html);
                for (var p in obj) if (obj.hasOwnProperty(p)) {
                  if (obj[p] == "<p><br></p>") {
                    obj[p] = " ";
                  }
                  $("#" + p).html(obj[p]);
                }
                // fix Summernote
                $(".summernote ul").addClass("browser-default");
                $(".summernote img").addClass("responsive-img");
                GSC.articles_rendered = true;
              } else {
                $(".summernote").html("");
              }
            }
          }
          if (typeof callback === "function") callback();
        });
        setTimeout(function() {GSC.ReadArticles()}, 10000);
      }
      GSC.ReadArticles();
    });

    // UI
    GSC.init.push(function() {
      GSC.names.push("UI");

      // update message
      $("#update-message").click(function() {
        location.replace(location.pathname + '?nonce={{ nonce }}');
      });

      // move to top button
      $('#movetotop').click(function() {
        $("html,body").animate({scrollTop:0}, "fast");
      });

      // fix summernote CSS
      $(".summernote>ul").each(function(i, obj) {
        $(obj).addClass("browser-default");
      });

      if (GSC.touch) {
        // enable webshare
        if (typeof window.WebShareFactory === "function") {
          $(".webshareicon").append("{{ l.webshare_button }}");
          $(".webshare-container").removeClass("hide").show();
        }
      }
     
      {{#is_admin}}
      // mobile logout menu
      $('#nav-mobile').append('<br><li><a class="white-text bold right oauth" href="/logout"><i class="fa-solid fa-right-from-bracket red-text"></i>Logout</a></li>');
      {{/is_admin}}

      {{^is_admin}}
      // mobile login menu
      {{#LOCALHOST}}{{#goauth_client_id}}{{#goauth_secret}}
      $('#nav-mobile').append('<br><li><a class="login white-text bold right oauth" href="{{ local_goauth_redirect }}"><i class="fa-solid fa-key yellow-text"></i>Login</a></li>');
      {{/goauth_secret}}{{/goauth_client_id}}
      {{/LOCALHOST}}
      {{^LOCALHOST}}{{#goauth_client_id}}{{#goauth_secret}}
      $('#nav-mobile').append('<br><li><a class="login white-text bold right oauth" href="{{ goauth_redirect }}"><i class="fa-solid fa-key yellow-text"></i>Login</a></li>');
      {{/goauth_secret}}{{/goauth_client_id}}
      {{/LOCALHOST}}
      {{/is_admin}}

      {{^is_admin}}
      // desktop login menu
      {{#LOCALHOST}}{{#goauth_client_id}}{{#goauth_secret}}
      $('.main-header nav.navbar ul').append('<li><a class="login white-text bold right oauth" href="{{ local_goauth_redirect }}"><i class="fa-solid fa-key yellow-text"></i></a></li>');
      {{/goauth_secret}}{{/goauth_client_id}}
      {{/LOCALHOST}}

      {{#is_goauth_origin}}
      {{^LOCALHOST}}{{#goauth_client_id}}{{#goauth_secret}}
      $('.main-header nav.navbar ul').append('<li><a class="login white-text bold right oauth" href="{{ goauth_redirect }}"><i class="fa-solid fa-key yellow-text"></i></a></li>');
      {{/goauth_secret}}{{/goauth_client_id}}
      {{/LOCALHOST}}
      {{/is_goauth_origin}}

      {{/is_admin}}

      $(".login").each(function() {
        const currentURL = new URL(window.location.href);
        const returnPath = currentURL.pathname;
        const href = $(this).attr("href");
        if (href) {
          const newHref = new URL(href, window.location.href);
          newHref.searchParams.set("returnURL", returnPath);
          $(this).attr("href", newHref.toString());
        }
      });

      setInterval(checkNetwork, 500);
    });

  }
})(window, document);
</script>
